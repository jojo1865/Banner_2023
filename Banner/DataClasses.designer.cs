#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Banner
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="db_Banner")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 擴充性方法定義
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertZipCode(ZipCode instance);
    partial void UpdateZipCode(ZipCode instance);
    partial void DeleteZipCode(ZipCode instance);
    partial void InsertAccount_Note(Account_Note instance);
    partial void UpdateAccount_Note(Account_Note instance);
    partial void DeleteAccount_Note(Account_Note instance);
    partial void InsertBaptized(Baptized instance);
    partial void UpdateBaptized(Baptized instance);
    partial void DeleteBaptized(Baptized instance);
    partial void InsertCommunity(Community instance);
    partial void UpdateCommunity(Community instance);
    partial void DeleteCommunity(Community instance);
    partial void InsertContect(Contect instance);
    partial void UpdateContect(Contect instance);
    partial void DeleteContect(Contect instance);
    partial void InsertFamily(Family instance);
    partial void UpdateFamily(Family instance);
    partial void DeleteFamily(Family instance);
    partial void InsertGroups(Groups instance);
    partial void UpdateGroups(Groups instance);
    partial void DeleteGroups(Groups instance);
    partial void InsertM_Organize_Account(M_Organize_Account instance);
    partial void UpdateM_Organize_Account(M_Organize_Account instance);
    partial void DeleteM_Organize_Account(M_Organize_Account instance);
    partial void InsertM_Place_Groups(M_Place_Groups instance);
    partial void UpdateM_Place_Groups(M_Place_Groups instance);
    partial void DeleteM_Place_Groups(M_Place_Groups instance);
    partial void InsertM_Rool_Account(M_Rool_Account instance);
    partial void UpdateM_Rool_Account(M_Rool_Account instance);
    partial void DeleteM_Rool_Account(M_Rool_Account instance);
    partial void InsertM_Rool_Menu(M_Rool_Menu instance);
    partial void UpdateM_Rool_Menu(M_Rool_Menu instance);
    partial void DeleteM_Rool_Menu(M_Rool_Menu instance);
    partial void InsertMarriage(Marriage instance);
    partial void UpdateMarriage(Marriage instance);
    partial void DeleteMarriage(Marriage instance);
    partial void InsertMeeting_Place(Meeting_Place instance);
    partial void UpdateMeeting_Place(Meeting_Place instance);
    partial void DeleteMeeting_Place(Meeting_Place instance);
    partial void InsertMenu(Menu instance);
    partial void UpdateMenu(Menu instance);
    partial void DeleteMenu(Menu instance);
    partial void InsertOrganize(Organize instance);
    partial void UpdateOrganize(Organize instance);
    partial void DeleteOrganize(Organize instance);
    partial void InsertRool(Rool instance);
    partial void UpdateRool(Rool instance);
    partial void DeleteRool(Rool instance);
    #endregion
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Account
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<ZipCode> ZipCode
		{
			get
			{
				return this.GetTable<ZipCode>();
			}
		}
		
		public System.Data.Linq.Table<Account_Note> Account_Note
		{
			get
			{
				return this.GetTable<Account_Note>();
			}
		}
		
		public System.Data.Linq.Table<Baptized> Baptized
		{
			get
			{
				return this.GetTable<Baptized>();
			}
		}
		
		public System.Data.Linq.Table<Community> Community
		{
			get
			{
				return this.GetTable<Community>();
			}
		}
		
		public System.Data.Linq.Table<Contect> Contect
		{
			get
			{
				return this.GetTable<Contect>();
			}
		}
		
		public System.Data.Linq.Table<Family> Family
		{
			get
			{
				return this.GetTable<Family>();
			}
		}
		
		public System.Data.Linq.Table<Groups> Groups
		{
			get
			{
				return this.GetTable<Groups>();
			}
		}
		
		public System.Data.Linq.Table<M_Organize_Account> M_Organize_Account
		{
			get
			{
				return this.GetTable<M_Organize_Account>();
			}
		}
		
		public System.Data.Linq.Table<M_Place_Groups> M_Place_Groups
		{
			get
			{
				return this.GetTable<M_Place_Groups>();
			}
		}
		
		public System.Data.Linq.Table<M_Rool_Account> M_Rool_Account
		{
			get
			{
				return this.GetTable<M_Rool_Account>();
			}
		}
		
		public System.Data.Linq.Table<M_Rool_Menu> M_Rool_Menu
		{
			get
			{
				return this.GetTable<M_Rool_Menu>();
			}
		}
		
		public System.Data.Linq.Table<Marriage> Marriage
		{
			get
			{
				return this.GetTable<Marriage>();
			}
		}
		
		public System.Data.Linq.Table<Meeting_Place> Meeting_Place
		{
			get
			{
				return this.GetTable<Meeting_Place>();
			}
		}
		
		public System.Data.Linq.Table<Menu> Menu
		{
			get
			{
				return this.GetTable<Menu>();
			}
		}
		
		public System.Data.Linq.Table<Organize> Organize
		{
			get
			{
				return this.GetTable<Organize>();
			}
		}
		
		public System.Data.Linq.Table<Rool> Rool
		{
			get
			{
				return this.GetTable<Rool>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ACID;
		
		private string _Login;
		
		private string _Password;
		
		private string _Name;
		
		private bool _ManFlag;
		
		private string _IDNumber;
		
		private int _IDType;
		
		private System.DateTime _Birthday;
		
		private int _EducationType;
		
		private int _JobType;
		
		private bool _MarriageFlag;
		
		private int _ZID;
		
		private string _Address;
		
		private System.Nullable<bool> _Baptized;
		
		private int _MPID;
		
		private string _GroupType;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntitySet<Account_Note> _Account_Note;
		
		private EntitySet<Baptized> _Baptized1;
		
		private EntitySet<Community> _Community;
		
		private EntitySet<Contect> _Contect;
		
		private EntitySet<Family> _Family;
		
		private EntitySet<Groups> _Groups;
		
		private EntitySet<M_Organize_Account> _M_Organize_Account;
		
		private EntitySet<M_Rool_Account> _M_Rool_Account;
		
		private EntitySet<Marriage> _Marriage;
		
		private EntityRef<ZipCode> _ZipCode;
		
		private EntityRef<Meeting_Place> _Meeting_Place;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnManFlagChanging(bool value);
    partial void OnManFlagChanged();
    partial void OnIDNumberChanging(string value);
    partial void OnIDNumberChanged();
    partial void OnIDTypeChanging(int value);
    partial void OnIDTypeChanged();
    partial void OnBirthdayChanging(System.DateTime value);
    partial void OnBirthdayChanged();
    partial void OnEducationTypeChanging(int value);
    partial void OnEducationTypeChanged();
    partial void OnJobTypeChanging(int value);
    partial void OnJobTypeChanged();
    partial void OnMarriageFlagChanging(bool value);
    partial void OnMarriageFlagChanged();
    partial void OnZIDChanging(int value);
    partial void OnZIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnBaptizedChanging(System.Nullable<bool> value);
    partial void OnBaptizedChanged();
    partial void OnMPIDChanging(int value);
    partial void OnMPIDChanged();
    partial void OnGroupTypeChanging(string value);
    partial void OnGroupTypeChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public Account()
		{
			this._Account_Note = new EntitySet<Account_Note>(new Action<Account_Note>(this.attach_Account_Note), new Action<Account_Note>(this.detach_Account_Note));
			this._Baptized1 = new EntitySet<Baptized>(new Action<Baptized>(this.attach_Baptized1), new Action<Baptized>(this.detach_Baptized1));
			this._Community = new EntitySet<Community>(new Action<Community>(this.attach_Community), new Action<Community>(this.detach_Community));
			this._Contect = new EntitySet<Contect>(new Action<Contect>(this.attach_Contect), new Action<Contect>(this.detach_Contect));
			this._Family = new EntitySet<Family>(new Action<Family>(this.attach_Family), new Action<Family>(this.detach_Family));
			this._Groups = new EntitySet<Groups>(new Action<Groups>(this.attach_Groups), new Action<Groups>(this.detach_Groups));
			this._M_Organize_Account = new EntitySet<M_Organize_Account>(new Action<M_Organize_Account>(this.attach_M_Organize_Account), new Action<M_Organize_Account>(this.detach_M_Organize_Account));
			this._M_Rool_Account = new EntitySet<M_Rool_Account>(new Action<M_Rool_Account>(this.attach_M_Rool_Account), new Action<M_Rool_Account>(this.detach_M_Rool_Account));
			this._Marriage = new EntitySet<Marriage>(new Action<Marriage>(this.attach_Marriage), new Action<Marriage>(this.detach_Marriage));
			this._ZipCode = default(EntityRef<ZipCode>);
			this._Meeting_Place = default(EntityRef<Meeting_Place>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="VarChar(100)")]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManFlag", DbType="Bit NOT NULL")]
		public bool ManFlag
		{
			get
			{
				return this._ManFlag;
			}
			set
			{
				if ((this._ManFlag != value))
				{
					this.OnManFlagChanging(value);
					this.SendPropertyChanging();
					this._ManFlag = value;
					this.SendPropertyChanged("ManFlag");
					this.OnManFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNumber", DbType="VarChar(30)")]
		public string IDNumber
		{
			get
			{
				return this._IDNumber;
			}
			set
			{
				if ((this._IDNumber != value))
				{
					this.OnIDNumberChanging(value);
					this.SendPropertyChanging();
					this._IDNumber = value;
					this.SendPropertyChanged("IDNumber");
					this.OnIDNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDType", DbType="Int NOT NULL")]
		public int IDType
		{
			get
			{
				return this._IDType;
			}
			set
			{
				if ((this._IDType != value))
				{
					this.OnIDTypeChanging(value);
					this.SendPropertyChanging();
					this._IDType = value;
					this.SendPropertyChanged("IDType");
					this.OnIDTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="DateTime NOT NULL")]
		public System.DateTime Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EducationType", DbType="Int NOT NULL")]
		public int EducationType
		{
			get
			{
				return this._EducationType;
			}
			set
			{
				if ((this._EducationType != value))
				{
					this.OnEducationTypeChanging(value);
					this.SendPropertyChanging();
					this._EducationType = value;
					this.SendPropertyChanged("EducationType");
					this.OnEducationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobType", DbType="Int NOT NULL")]
		public int JobType
		{
			get
			{
				return this._JobType;
			}
			set
			{
				if ((this._JobType != value))
				{
					this.OnJobTypeChanging(value);
					this.SendPropertyChanging();
					this._JobType = value;
					this.SendPropertyChanged("JobType");
					this.OnJobTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarriageFlag", DbType="Bit NOT NULL")]
		public bool MarriageFlag
		{
			get
			{
				return this._MarriageFlag;
			}
			set
			{
				if ((this._MarriageFlag != value))
				{
					this.OnMarriageFlagChanging(value);
					this.SendPropertyChanging();
					this._MarriageFlag = value;
					this.SendPropertyChanged("MarriageFlag");
					this.OnMarriageFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZID", DbType="Int NOT NULL")]
		public int ZID
		{
			get
			{
				return this._ZID;
			}
			set
			{
				if ((this._ZID != value))
				{
					if (this._ZipCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnZIDChanging(value);
					this.SendPropertyChanging();
					this._ZID = value;
					this.SendPropertyChanged("ZID");
					this.OnZIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(300)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Baptized", DbType="Bit")]
		public System.Nullable<bool> Baptized
		{
			get
			{
				return this._Baptized;
			}
			set
			{
				if ((this._Baptized != value))
				{
					this.OnBaptizedChanging(value);
					this.SendPropertyChanging();
					this._Baptized = value;
					this.SendPropertyChanged("Baptized");
					this.OnBaptizedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MPID", DbType="Int NOT NULL")]
		public int MPID
		{
			get
			{
				return this._MPID;
			}
			set
			{
				if ((this._MPID != value))
				{
					if (this._Meeting_Place.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMPIDChanging(value);
					this.SendPropertyChanging();
					this._MPID = value;
					this.SendPropertyChanged("MPID");
					this.OnMPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupType", DbType="NVarChar(50)")]
		public string GroupType
		{
			get
			{
				return this._GroupType;
			}
			set
			{
				if ((this._GroupType != value))
				{
					this.OnGroupTypeChanging(value);
					this.SendPropertyChanging();
					this._GroupType = value;
					this.SendPropertyChanged("GroupType");
					this.OnGroupTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Account_Note", Storage="_Account_Note", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<Account_Note> Account_Note
		{
			get
			{
				return this._Account_Note;
			}
			set
			{
				this._Account_Note.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Baptized", Storage="_Baptized1", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<Baptized> Baptized1
		{
			get
			{
				return this._Baptized1;
			}
			set
			{
				this._Baptized1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Community", Storage="_Community", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<Community> Community
		{
			get
			{
				return this._Community;
			}
			set
			{
				this._Community.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Contect", Storage="_Contect", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<Contect> Contect
		{
			get
			{
				return this._Contect;
			}
			set
			{
				this._Contect.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Family", Storage="_Family", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<Family> Family
		{
			get
			{
				return this._Family;
			}
			set
			{
				this._Family.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Groups", Storage="_Groups", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<Groups> Groups
		{
			get
			{
				return this._Groups;
			}
			set
			{
				this._Groups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_M_Organize_Account", Storage="_M_Organize_Account", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<M_Organize_Account> M_Organize_Account
		{
			get
			{
				return this._M_Organize_Account;
			}
			set
			{
				this._M_Organize_Account.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_M_Rool_Account", Storage="_M_Rool_Account", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<M_Rool_Account> M_Rool_Account
		{
			get
			{
				return this._M_Rool_Account;
			}
			set
			{
				this._M_Rool_Account.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Marriage", Storage="_Marriage", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<Marriage> Marriage
		{
			get
			{
				return this._Marriage;
			}
			set
			{
				this._Marriage.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ZipCode_Account", Storage="_ZipCode", ThisKey="ZID", OtherKey="ZID", IsForeignKey=true)]
		public ZipCode ZipCode
		{
			get
			{
				return this._ZipCode.Entity;
			}
			set
			{
				ZipCode previousValue = this._ZipCode.Entity;
				if (((previousValue != value) 
							|| (this._ZipCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ZipCode.Entity = null;
						previousValue.Account.Remove(this);
					}
					this._ZipCode.Entity = value;
					if ((value != null))
					{
						value.Account.Add(this);
						this._ZID = value.ZID;
					}
					else
					{
						this._ZID = default(int);
					}
					this.SendPropertyChanged("ZipCode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meeting_Place_Account", Storage="_Meeting_Place", ThisKey="MPID", OtherKey="MPID", IsForeignKey=true)]
		public Meeting_Place Meeting_Place
		{
			get
			{
				return this._Meeting_Place.Entity;
			}
			set
			{
				Meeting_Place previousValue = this._Meeting_Place.Entity;
				if (((previousValue != value) 
							|| (this._Meeting_Place.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meeting_Place.Entity = null;
						previousValue.Account.Remove(this);
					}
					this._Meeting_Place.Entity = value;
					if ((value != null))
					{
						value.Account.Add(this);
						this._MPID = value.MPID;
					}
					else
					{
						this._MPID = default(int);
					}
					this.SendPropertyChanged("Meeting_Place");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Account_Note(Account_Note entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Account_Note(Account_Note entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Baptized1(Baptized entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Baptized1(Baptized entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Community(Community entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Community(Community entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Contect(Contect entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Contect(Contect entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Family(Family entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Family(Family entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Groups(Groups entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Groups(Groups entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_M_Organize_Account(M_Organize_Account entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_M_Organize_Account(M_Organize_Account entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_M_Rool_Account(M_Rool_Account entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_M_Rool_Account(M_Rool_Account entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Marriage(Marriage entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Marriage(Marriage entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ZipCode")]
	public partial class ZipCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ZID;
		
		private int _ParentID;
		
		private string _Code;
		
		private string _Title;
		
		private string _GroupName;
		
		private string _Note;
		
		private bool _ActiveFlag;
		
		private EntitySet<Account> _Account;
		
		private EntitySet<Meeting_Place> _Meeting_Place;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZIDChanging(int value);
    partial void OnZIDChanged();
    partial void OnParentIDChanging(int value);
    partial void OnParentIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    #endregion
		
		public ZipCode()
		{
			this._Account = new EntitySet<Account>(new Action<Account>(this.attach_Account), new Action<Account>(this.detach_Account));
			this._Meeting_Place = new EntitySet<Meeting_Place>(new Action<Meeting_Place>(this.attach_Meeting_Place), new Action<Meeting_Place>(this.detach_Meeting_Place));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ZID
		{
			get
			{
				return this._ZID;
			}
			set
			{
				if ((this._ZID != value))
				{
					this.OnZIDChanging(value);
					this.SendPropertyChanging();
					this._ZID = value;
					this.SendPropertyChanged("ZID");
					this.OnZIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int NOT NULL")]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(20)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(200)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(200)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(200)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ZipCode_Account", Storage="_Account", ThisKey="ZID", OtherKey="ZID")]
		public EntitySet<Account> Account
		{
			get
			{
				return this._Account;
			}
			set
			{
				this._Account.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ZipCode_Meeting_Place", Storage="_Meeting_Place", ThisKey="ZID", OtherKey="ZID")]
		public EntitySet<Meeting_Place> Meeting_Place
		{
			get
			{
				return this._Meeting_Place;
			}
			set
			{
				this._Meeting_Place.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Account(Account entity)
		{
			this.SendPropertyChanging();
			entity.ZipCode = this;
		}
		
		private void detach_Account(Account entity)
		{
			this.SendPropertyChanging();
			entity.ZipCode = null;
		}
		
		private void attach_Meeting_Place(Meeting_Place entity)
		{
			this.SendPropertyChanging();
			entity.ZipCode = this;
		}
		
		private void detach_Meeting_Place(Meeting_Place entity)
		{
			this.SendPropertyChanging();
			entity.ZipCode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account_Note")]
	public partial class Account_Note : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ANID;
		
		private int _ACID;
		
		private int _OID;
		
		private int _NoteType;
		
		private string _Note;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntityRef<Account> _Account;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnANIDChanging(int value);
    partial void OnANIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnOIDChanging(int value);
    partial void OnOIDChanged();
    partial void OnNoteTypeChanging(int value);
    partial void OnNoteTypeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public Account_Note()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ANID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ANID
		{
			get
			{
				return this._ANID;
			}
			set
			{
				if ((this._ANID != value))
				{
					this.OnANIDChanging(value);
					this.SendPropertyChanging();
					this._ANID = value;
					this.SendPropertyChanged("ANID");
					this.OnANIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OID", DbType="Int NOT NULL")]
		public int OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoteType", DbType="Int NOT NULL")]
		public int NoteType
		{
			get
			{
				return this._NoteType;
			}
			set
			{
				if ((this._NoteType != value))
				{
					this.OnNoteTypeChanging(value);
					this.SendPropertyChanging();
					this._NoteType = value;
					this.SendPropertyChanged("NoteType");
					this.OnNoteTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Account_Note", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Account_Note.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Account_Note.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Baptized")]
	public partial class Baptized : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BID;
		
		private int _OID;
		
		private int _ACID;
		
		private System.DateTime _BaptismDate;
		
		private bool _ImplementFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntityRef<Account> _Account;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBIDChanging(int value);
    partial void OnBIDChanged();
    partial void OnOIDChanging(int value);
    partial void OnOIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnBaptismDateChanging(System.DateTime value);
    partial void OnBaptismDateChanged();
    partial void OnImplementFlagChanging(bool value);
    partial void OnImplementFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public Baptized()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BID
		{
			get
			{
				return this._BID;
			}
			set
			{
				if ((this._BID != value))
				{
					this.OnBIDChanging(value);
					this.SendPropertyChanging();
					this._BID = value;
					this.SendPropertyChanged("BID");
					this.OnBIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OID", DbType="Int NOT NULL")]
		public int OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaptismDate", DbType="DateTime NOT NULL")]
		public System.DateTime BaptismDate
		{
			get
			{
				return this._BaptismDate;
			}
			set
			{
				if ((this._BaptismDate != value))
				{
					this.OnBaptismDateChanging(value);
					this.SendPropertyChanging();
					this._BaptismDate = value;
					this.SendPropertyChanged("BaptismDate");
					this.OnBaptismDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImplementFlag", DbType="Bit NOT NULL")]
		public bool ImplementFlag
		{
			get
			{
				return this._ImplementFlag;
			}
			set
			{
				if ((this._ImplementFlag != value))
				{
					this.OnImplementFlagChanging(value);
					this.SendPropertyChanging();
					this._ImplementFlag = value;
					this.SendPropertyChanged("ImplementFlag");
					this.OnImplementFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Baptized", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Baptized1.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Baptized1.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Community")]
	public partial class Community : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CID;
		
		private int _ACID;
		
		private int _CommunityType;
		
		private string _CommunityValue;
		
		private EntityRef<Account> _Account;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(int value);
    partial void OnCIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnCommunityTypeChanging(int value);
    partial void OnCommunityTypeChanged();
    partial void OnCommunityValueChanging(string value);
    partial void OnCommunityValueChanged();
    #endregion
		
		public Community()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommunityType", DbType="Int NOT NULL")]
		public int CommunityType
		{
			get
			{
				return this._CommunityType;
			}
			set
			{
				if ((this._CommunityType != value))
				{
					this.OnCommunityTypeChanging(value);
					this.SendPropertyChanging();
					this._CommunityType = value;
					this.SendPropertyChanged("CommunityType");
					this.OnCommunityTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommunityValue", DbType="VarChar(300)")]
		public string CommunityValue
		{
			get
			{
				return this._CommunityValue;
			}
			set
			{
				if ((this._CommunityValue != value))
				{
					this.OnCommunityValueChanging(value);
					this.SendPropertyChanging();
					this._CommunityValue = value;
					this.SendPropertyChanged("CommunityValue");
					this.OnCommunityValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Community", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Community.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Community.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contect")]
	public partial class Contect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CID;
		
		private int _ACID;
		
		private int _ContectType;
		
		private string _ContectValue;
		
		private EntityRef<Account> _Account;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(int value);
    partial void OnCIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnContectTypeChanging(int value);
    partial void OnContectTypeChanged();
    partial void OnContectValueChanging(string value);
    partial void OnContectValueChanged();
    #endregion
		
		public Contect()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContectType", DbType="Int NOT NULL")]
		public int ContectType
		{
			get
			{
				return this._ContectType;
			}
			set
			{
				if ((this._ContectType != value))
				{
					this.OnContectTypeChanging(value);
					this.SendPropertyChanging();
					this._ContectType = value;
					this.SendPropertyChanged("ContectType");
					this.OnContectTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContectValue", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string ContectValue
		{
			get
			{
				return this._ContectValue;
			}
			set
			{
				if ((this._ContectValue != value))
				{
					this.OnContectValueChanging(value);
					this.SendPropertyChanging();
					this._ContectValue = value;
					this.SendPropertyChanged("ContectValue");
					this.OnContectValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Contect", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Contect.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Contect.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Family")]
	public partial class Family : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FID;
		
		private int _MID;
		
		private int _ACID;
		
		private int _SortNo;
		
		private bool _DeleteFlag;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Marriage> _Marriage;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFIDChanging(int value);
    partial void OnFIDChanged();
    partial void OnMIDChanging(int value);
    partial void OnMIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnSortNoChanging(int value);
    partial void OnSortNoChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    #endregion
		
		public Family()
		{
			this._Account = default(EntityRef<Account>);
			this._Marriage = default(EntityRef<Marriage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FID
		{
			get
			{
				return this._FID;
			}
			set
			{
				if ((this._FID != value))
				{
					this.OnFIDChanging(value);
					this.SendPropertyChanging();
					this._FID = value;
					this.SendPropertyChanged("FID");
					this.OnFIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MID", DbType="Int NOT NULL")]
		public int MID
		{
			get
			{
				return this._MID;
			}
			set
			{
				if ((this._MID != value))
				{
					if (this._Marriage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMIDChanging(value);
					this.SendPropertyChanging();
					this._MID = value;
					this.SendPropertyChanged("MID");
					this.OnMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortNo", DbType="Int NOT NULL")]
		public int SortNo
		{
			get
			{
				return this._SortNo;
			}
			set
			{
				if ((this._SortNo != value))
				{
					this.OnSortNoChanging(value);
					this.SendPropertyChanging();
					this._SortNo = value;
					this.SendPropertyChanged("SortNo");
					this.OnSortNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Family", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Family.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Family.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Marriage_Family", Storage="_Marriage", ThisKey="MID", OtherKey="MID", IsForeignKey=true)]
		public Marriage Marriage
		{
			get
			{
				return this._Marriage.Entity;
			}
			set
			{
				Marriage previousValue = this._Marriage.Entity;
				if (((previousValue != value) 
							|| (this._Marriage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Marriage.Entity = null;
						previousValue.Family.Remove(this);
					}
					this._Marriage.Entity = value;
					if ((value != null))
					{
						value.Family.Add(this);
						this._MID = value.MID;
					}
					else
					{
						this._MID = default(int);
					}
					this.SendPropertyChanged("Marriage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
	public partial class Groups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GID;
		
		private int _ACID;
		
		private string _Code;
		
		private string _Title;
		
		private bool _OutreachFlag;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntitySet<M_Place_Groups> _M_Place_Groups;
		
		private EntityRef<Account> _Account;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGIDChanging(int value);
    partial void OnGIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOutreachFlagChanging(bool value);
    partial void OnOutreachFlagChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public Groups()
		{
			this._M_Place_Groups = new EntitySet<M_Place_Groups>(new Action<M_Place_Groups>(this.attach_M_Place_Groups), new Action<M_Place_Groups>(this.detach_M_Place_Groups));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GID
		{
			get
			{
				return this._GID;
			}
			set
			{
				if ((this._GID != value))
				{
					this.OnGIDChanging(value);
					this.SendPropertyChanging();
					this._GID = value;
					this.SendPropertyChanged("GID");
					this.OnGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(30)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutreachFlag", DbType="Bit NOT NULL")]
		public bool OutreachFlag
		{
			get
			{
				return this._OutreachFlag;
			}
			set
			{
				if ((this._OutreachFlag != value))
				{
					this.OnOutreachFlagChanging(value);
					this.SendPropertyChanging();
					this._OutreachFlag = value;
					this.SendPropertyChanged("OutreachFlag");
					this.OnOutreachFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Groups_M_Place_Groups", Storage="_M_Place_Groups", ThisKey="GID", OtherKey="GID")]
		public EntitySet<M_Place_Groups> M_Place_Groups
		{
			get
			{
				return this._M_Place_Groups;
			}
			set
			{
				this._M_Place_Groups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Groups", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_M_Place_Groups(M_Place_Groups entity)
		{
			this.SendPropertyChanging();
			entity.Groups = this;
		}
		
		private void detach_M_Place_Groups(M_Place_Groups entity)
		{
			this.SendPropertyChanging();
			entity.Groups = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.M_Organize_Account")]
	public partial class M_Organize_Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MOAID;
		
		private int _OID;
		
		private int _ACID;
		
		private System.DateTime _JoinDate;
		
		private System.DateTime _LeaveDate;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Organize> _Organize;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMOAIDChanging(int value);
    partial void OnMOAIDChanged();
    partial void OnOIDChanging(int value);
    partial void OnOIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnJoinDateChanging(System.DateTime value);
    partial void OnJoinDateChanged();
    partial void OnLeaveDateChanging(System.DateTime value);
    partial void OnLeaveDateChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public M_Organize_Account()
		{
			this._Account = default(EntityRef<Account>);
			this._Organize = default(EntityRef<Organize>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MOAID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MOAID
		{
			get
			{
				return this._MOAID;
			}
			set
			{
				if ((this._MOAID != value))
				{
					this.OnMOAIDChanging(value);
					this.SendPropertyChanging();
					this._MOAID = value;
					this.SendPropertyChanged("MOAID");
					this.OnMOAIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OID", DbType="Int NOT NULL")]
		public int OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					if (this._Organize.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JoinDate", DbType="DateTime NOT NULL")]
		public System.DateTime JoinDate
		{
			get
			{
				return this._JoinDate;
			}
			set
			{
				if ((this._JoinDate != value))
				{
					this.OnJoinDateChanging(value);
					this.SendPropertyChanging();
					this._JoinDate = value;
					this.SendPropertyChanged("JoinDate");
					this.OnJoinDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaveDate", DbType="DateTime NOT NULL")]
		public System.DateTime LeaveDate
		{
			get
			{
				return this._LeaveDate;
			}
			set
			{
				if ((this._LeaveDate != value))
				{
					this.OnLeaveDateChanging(value);
					this.SendPropertyChanging();
					this._LeaveDate = value;
					this.SendPropertyChanged("LeaveDate");
					this.OnLeaveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_M_Organize_Account", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.M_Organize_Account.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.M_Organize_Account.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organize_M_Organize_Account", Storage="_Organize", ThisKey="OID", OtherKey="OID", IsForeignKey=true)]
		public Organize Organize
		{
			get
			{
				return this._Organize.Entity;
			}
			set
			{
				Organize previousValue = this._Organize.Entity;
				if (((previousValue != value) 
							|| (this._Organize.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organize.Entity = null;
						previousValue.M_Organize_Account.Remove(this);
					}
					this._Organize.Entity = value;
					if ((value != null))
					{
						value.M_Organize_Account.Add(this);
						this._OID = value.OID;
					}
					else
					{
						this._OID = default(int);
					}
					this.SendPropertyChanged("Organize");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.M_Place_Groups")]
	public partial class M_Place_Groups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MID;
		
		private int _MPID;
		
		private int _GID;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntityRef<Groups> _Groups;
		
		private EntityRef<Meeting_Place> _Meeting_Place;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMIDChanging(int value);
    partial void OnMIDChanged();
    partial void OnMPIDChanging(int value);
    partial void OnMPIDChanged();
    partial void OnGIDChanging(int value);
    partial void OnGIDChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public M_Place_Groups()
		{
			this._Groups = default(EntityRef<Groups>);
			this._Meeting_Place = default(EntityRef<Meeting_Place>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MID
		{
			get
			{
				return this._MID;
			}
			set
			{
				if ((this._MID != value))
				{
					this.OnMIDChanging(value);
					this.SendPropertyChanging();
					this._MID = value;
					this.SendPropertyChanged("MID");
					this.OnMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MPID", DbType="Int NOT NULL")]
		public int MPID
		{
			get
			{
				return this._MPID;
			}
			set
			{
				if ((this._MPID != value))
				{
					if (this._Meeting_Place.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMPIDChanging(value);
					this.SendPropertyChanging();
					this._MPID = value;
					this.SendPropertyChanged("MPID");
					this.OnMPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GID", DbType="Int NOT NULL")]
		public int GID
		{
			get
			{
				return this._GID;
			}
			set
			{
				if ((this._GID != value))
				{
					if (this._Groups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGIDChanging(value);
					this.SendPropertyChanging();
					this._GID = value;
					this.SendPropertyChanged("GID");
					this.OnGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Groups_M_Place_Groups", Storage="_Groups", ThisKey="GID", OtherKey="GID", IsForeignKey=true)]
		public Groups Groups
		{
			get
			{
				return this._Groups.Entity;
			}
			set
			{
				Groups previousValue = this._Groups.Entity;
				if (((previousValue != value) 
							|| (this._Groups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Groups.Entity = null;
						previousValue.M_Place_Groups.Remove(this);
					}
					this._Groups.Entity = value;
					if ((value != null))
					{
						value.M_Place_Groups.Add(this);
						this._GID = value.GID;
					}
					else
					{
						this._GID = default(int);
					}
					this.SendPropertyChanged("Groups");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meeting_Place_M_Place_Groups", Storage="_Meeting_Place", ThisKey="MPID", OtherKey="MPID", IsForeignKey=true)]
		public Meeting_Place Meeting_Place
		{
			get
			{
				return this._Meeting_Place.Entity;
			}
			set
			{
				Meeting_Place previousValue = this._Meeting_Place.Entity;
				if (((previousValue != value) 
							|| (this._Meeting_Place.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meeting_Place.Entity = null;
						previousValue.M_Place_Groups.Remove(this);
					}
					this._Meeting_Place.Entity = value;
					if ((value != null))
					{
						value.M_Place_Groups.Add(this);
						this._MPID = value.MPID;
					}
					else
					{
						this._MPID = default(int);
					}
					this.SendPropertyChanged("Meeting_Place");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.M_Rool_Account")]
	public partial class M_Rool_Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MID;
		
		private int _ACID;
		
		private int _RID;
		
		private System.DateTime _JoinDate;
		
		private System.DateTime _LeaveDate;
		
		private string _Note;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Rool> _Rool;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMIDChanging(int value);
    partial void OnMIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnRIDChanging(int value);
    partial void OnRIDChanged();
    partial void OnJoinDateChanging(System.DateTime value);
    partial void OnJoinDateChanged();
    partial void OnLeaveDateChanging(System.DateTime value);
    partial void OnLeaveDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public M_Rool_Account()
		{
			this._Account = default(EntityRef<Account>);
			this._Rool = default(EntityRef<Rool>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MID
		{
			get
			{
				return this._MID;
			}
			set
			{
				if ((this._MID != value))
				{
					this.OnMIDChanging(value);
					this.SendPropertyChanging();
					this._MID = value;
					this.SendPropertyChanged("MID");
					this.OnMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RID", DbType="Int NOT NULL")]
		public int RID
		{
			get
			{
				return this._RID;
			}
			set
			{
				if ((this._RID != value))
				{
					if (this._Rool.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRIDChanging(value);
					this.SendPropertyChanging();
					this._RID = value;
					this.SendPropertyChanged("RID");
					this.OnRIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JoinDate", DbType="DateTime NOT NULL")]
		public System.DateTime JoinDate
		{
			get
			{
				return this._JoinDate;
			}
			set
			{
				if ((this._JoinDate != value))
				{
					this.OnJoinDateChanging(value);
					this.SendPropertyChanging();
					this._JoinDate = value;
					this.SendPropertyChanged("JoinDate");
					this.OnJoinDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaveDate", DbType="DateTime NOT NULL")]
		public System.DateTime LeaveDate
		{
			get
			{
				return this._LeaveDate;
			}
			set
			{
				if ((this._LeaveDate != value))
				{
					this.OnLeaveDateChanging(value);
					this.SendPropertyChanging();
					this._LeaveDate = value;
					this.SendPropertyChanged("LeaveDate");
					this.OnLeaveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(200)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_M_Rool_Account", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.M_Rool_Account.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.M_Rool_Account.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rool_M_Rool_Account", Storage="_Rool", ThisKey="RID", OtherKey="RID", IsForeignKey=true)]
		public Rool Rool
		{
			get
			{
				return this._Rool.Entity;
			}
			set
			{
				Rool previousValue = this._Rool.Entity;
				if (((previousValue != value) 
							|| (this._Rool.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rool.Entity = null;
						previousValue.M_Rool_Account.Remove(this);
					}
					this._Rool.Entity = value;
					if ((value != null))
					{
						value.M_Rool_Account.Add(this);
						this._RID = value.RID;
					}
					else
					{
						this._RID = default(int);
					}
					this.SendPropertyChanged("Rool");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.M_Rool_Menu")]
	public partial class M_Rool_Menu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MPMID;
		
		private int _RID;
		
		private int _MID;
		
		private bool _ShowFlag;
		
		private bool _AddFlag;
		
		private bool _EditFlag;
		
		private bool _DeleteFlag;
		
		private bool _PrintFlag;
		
		private bool _UploadFlag;
		
		private EntityRef<Menu> _Menu;
		
		private EntityRef<Rool> _Rool;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMPMIDChanging(int value);
    partial void OnMPMIDChanged();
    partial void OnRIDChanging(int value);
    partial void OnRIDChanged();
    partial void OnMIDChanging(int value);
    partial void OnMIDChanged();
    partial void OnShowFlagChanging(bool value);
    partial void OnShowFlagChanged();
    partial void OnAddFlagChanging(bool value);
    partial void OnAddFlagChanged();
    partial void OnEditFlagChanging(bool value);
    partial void OnEditFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnPrintFlagChanging(bool value);
    partial void OnPrintFlagChanged();
    partial void OnUploadFlagChanging(bool value);
    partial void OnUploadFlagChanged();
    #endregion
		
		public M_Rool_Menu()
		{
			this._Menu = default(EntityRef<Menu>);
			this._Rool = default(EntityRef<Rool>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MPMID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MPMID
		{
			get
			{
				return this._MPMID;
			}
			set
			{
				if ((this._MPMID != value))
				{
					this.OnMPMIDChanging(value);
					this.SendPropertyChanging();
					this._MPMID = value;
					this.SendPropertyChanged("MPMID");
					this.OnMPMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RID", DbType="Int NOT NULL")]
		public int RID
		{
			get
			{
				return this._RID;
			}
			set
			{
				if ((this._RID != value))
				{
					if (this._Rool.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRIDChanging(value);
					this.SendPropertyChanging();
					this._RID = value;
					this.SendPropertyChanged("RID");
					this.OnRIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MID", DbType="Int NOT NULL")]
		public int MID
		{
			get
			{
				return this._MID;
			}
			set
			{
				if ((this._MID != value))
				{
					if (this._Menu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMIDChanging(value);
					this.SendPropertyChanging();
					this._MID = value;
					this.SendPropertyChanged("MID");
					this.OnMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowFlag", DbType="Bit NOT NULL")]
		public bool ShowFlag
		{
			get
			{
				return this._ShowFlag;
			}
			set
			{
				if ((this._ShowFlag != value))
				{
					this.OnShowFlagChanging(value);
					this.SendPropertyChanging();
					this._ShowFlag = value;
					this.SendPropertyChanged("ShowFlag");
					this.OnShowFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddFlag", DbType="Bit NOT NULL")]
		public bool AddFlag
		{
			get
			{
				return this._AddFlag;
			}
			set
			{
				if ((this._AddFlag != value))
				{
					this.OnAddFlagChanging(value);
					this.SendPropertyChanging();
					this._AddFlag = value;
					this.SendPropertyChanged("AddFlag");
					this.OnAddFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditFlag", DbType="Bit NOT NULL")]
		public bool EditFlag
		{
			get
			{
				return this._EditFlag;
			}
			set
			{
				if ((this._EditFlag != value))
				{
					this.OnEditFlagChanging(value);
					this.SendPropertyChanging();
					this._EditFlag = value;
					this.SendPropertyChanged("EditFlag");
					this.OnEditFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrintFlag", DbType="Bit NOT NULL")]
		public bool PrintFlag
		{
			get
			{
				return this._PrintFlag;
			}
			set
			{
				if ((this._PrintFlag != value))
				{
					this.OnPrintFlagChanging(value);
					this.SendPropertyChanging();
					this._PrintFlag = value;
					this.SendPropertyChanged("PrintFlag");
					this.OnPrintFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadFlag", DbType="Bit NOT NULL")]
		public bool UploadFlag
		{
			get
			{
				return this._UploadFlag;
			}
			set
			{
				if ((this._UploadFlag != value))
				{
					this.OnUploadFlagChanging(value);
					this.SendPropertyChanging();
					this._UploadFlag = value;
					this.SendPropertyChanged("UploadFlag");
					this.OnUploadFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_M_Rool_Menu", Storage="_Menu", ThisKey="MID", OtherKey="MID", IsForeignKey=true)]
		public Menu Menu
		{
			get
			{
				return this._Menu.Entity;
			}
			set
			{
				Menu previousValue = this._Menu.Entity;
				if (((previousValue != value) 
							|| (this._Menu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Menu.Entity = null;
						previousValue.M_Rool_Menu.Remove(this);
					}
					this._Menu.Entity = value;
					if ((value != null))
					{
						value.M_Rool_Menu.Add(this);
						this._MID = value.MID;
					}
					else
					{
						this._MID = default(int);
					}
					this.SendPropertyChanged("Menu");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rool_M_Rool_Menu", Storage="_Rool", ThisKey="RID", OtherKey="RID", IsForeignKey=true)]
		public Rool Rool
		{
			get
			{
				return this._Rool.Entity;
			}
			set
			{
				Rool previousValue = this._Rool.Entity;
				if (((previousValue != value) 
							|| (this._Rool.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rool.Entity = null;
						previousValue.M_Rool_Menu.Remove(this);
					}
					this._Rool.Entity = value;
					if ((value != null))
					{
						value.M_Rool_Menu.Add(this);
						this._RID = value.RID;
					}
					else
					{
						this._RID = default(int);
					}
					this.SendPropertyChanged("Rool");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Marriage")]
	public partial class Marriage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MID;
		
		private int _ACID;
		
		private string _TargetName;
		
		private string _TargetCellPhone;
		
		private int _TargetACID;
		
		private bool _DeleteFlag;
		
		private EntitySet<Family> _Family;
		
		private EntityRef<Account> _Account;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMIDChanging(int value);
    partial void OnMIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnTargetNameChanging(string value);
    partial void OnTargetNameChanged();
    partial void OnTargetCellPhoneChanging(string value);
    partial void OnTargetCellPhoneChanged();
    partial void OnTargetACIDChanging(int value);
    partial void OnTargetACIDChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    #endregion
		
		public Marriage()
		{
			this._Family = new EntitySet<Family>(new Action<Family>(this.attach_Family), new Action<Family>(this.detach_Family));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MID
		{
			get
			{
				return this._MID;
			}
			set
			{
				if ((this._MID != value))
				{
					this.OnMIDChanging(value);
					this.SendPropertyChanging();
					this._MID = value;
					this.SendPropertyChanged("MID");
					this.OnMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetName", DbType="NVarChar(50)")]
		public string TargetName
		{
			get
			{
				return this._TargetName;
			}
			set
			{
				if ((this._TargetName != value))
				{
					this.OnTargetNameChanging(value);
					this.SendPropertyChanging();
					this._TargetName = value;
					this.SendPropertyChanged("TargetName");
					this.OnTargetNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetCellPhone", DbType="NVarChar(50)")]
		public string TargetCellPhone
		{
			get
			{
				return this._TargetCellPhone;
			}
			set
			{
				if ((this._TargetCellPhone != value))
				{
					this.OnTargetCellPhoneChanging(value);
					this.SendPropertyChanging();
					this._TargetCellPhone = value;
					this.SendPropertyChanged("TargetCellPhone");
					this.OnTargetCellPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetACID", DbType="Int NOT NULL")]
		public int TargetACID
		{
			get
			{
				return this._TargetACID;
			}
			set
			{
				if ((this._TargetACID != value))
				{
					this.OnTargetACIDChanging(value);
					this.SendPropertyChanging();
					this._TargetACID = value;
					this.SendPropertyChanged("TargetACID");
					this.OnTargetACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Marriage_Family", Storage="_Family", ThisKey="MID", OtherKey="MID")]
		public EntitySet<Family> Family
		{
			get
			{
				return this._Family;
			}
			set
			{
				this._Family.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Marriage", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Marriage.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Marriage.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Family(Family entity)
		{
			this.SendPropertyChanging();
			entity.Marriage = this;
		}
		
		private void detach_Family(Family entity)
		{
			this.SendPropertyChanging();
			entity.Marriage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Meeting_Place")]
	public partial class Meeting_Place : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MPID;
		
		private string _Code;
		
		private string _Title;
		
		private int _ZID;
		
		private string _Address;
		
		private string _PhoneNo;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntitySet<Account> _Account;
		
		private EntitySet<M_Place_Groups> _M_Place_Groups;
		
		private EntityRef<ZipCode> _ZipCode;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMPIDChanging(int value);
    partial void OnMPIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnZIDChanging(int value);
    partial void OnZIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneNoChanging(string value);
    partial void OnPhoneNoChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public Meeting_Place()
		{
			this._Account = new EntitySet<Account>(new Action<Account>(this.attach_Account), new Action<Account>(this.detach_Account));
			this._M_Place_Groups = new EntitySet<M_Place_Groups>(new Action<M_Place_Groups>(this.attach_M_Place_Groups), new Action<M_Place_Groups>(this.detach_M_Place_Groups));
			this._ZipCode = default(EntityRef<ZipCode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MPID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MPID
		{
			get
			{
				return this._MPID;
			}
			set
			{
				if ((this._MPID != value))
				{
					this.OnMPIDChanging(value);
					this.SendPropertyChanging();
					this._MPID = value;
					this.SendPropertyChanged("MPID");
					this.OnMPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(30)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZID", DbType="Int NOT NULL")]
		public int ZID
		{
			get
			{
				return this._ZID;
			}
			set
			{
				if ((this._ZID != value))
				{
					if (this._ZipCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnZIDChanging(value);
					this.SendPropertyChanging();
					this._ZID = value;
					this.SendPropertyChanged("ZID");
					this.OnZIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(300)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNo", DbType="NVarChar(50)")]
		public string PhoneNo
		{
			get
			{
				return this._PhoneNo;
			}
			set
			{
				if ((this._PhoneNo != value))
				{
					this.OnPhoneNoChanging(value);
					this.SendPropertyChanging();
					this._PhoneNo = value;
					this.SendPropertyChanged("PhoneNo");
					this.OnPhoneNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meeting_Place_Account", Storage="_Account", ThisKey="MPID", OtherKey="MPID")]
		public EntitySet<Account> Account
		{
			get
			{
				return this._Account;
			}
			set
			{
				this._Account.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meeting_Place_M_Place_Groups", Storage="_M_Place_Groups", ThisKey="MPID", OtherKey="MPID")]
		public EntitySet<M_Place_Groups> M_Place_Groups
		{
			get
			{
				return this._M_Place_Groups;
			}
			set
			{
				this._M_Place_Groups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ZipCode_Meeting_Place", Storage="_ZipCode", ThisKey="ZID", OtherKey="ZID", IsForeignKey=true)]
		public ZipCode ZipCode
		{
			get
			{
				return this._ZipCode.Entity;
			}
			set
			{
				ZipCode previousValue = this._ZipCode.Entity;
				if (((previousValue != value) 
							|| (this._ZipCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ZipCode.Entity = null;
						previousValue.Meeting_Place.Remove(this);
					}
					this._ZipCode.Entity = value;
					if ((value != null))
					{
						value.Meeting_Place.Add(this);
						this._ZID = value.ZID;
					}
					else
					{
						this._ZID = default(int);
					}
					this.SendPropertyChanged("ZipCode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Account(Account entity)
		{
			this.SendPropertyChanging();
			entity.Meeting_Place = this;
		}
		
		private void detach_Account(Account entity)
		{
			this.SendPropertyChanging();
			entity.Meeting_Place = null;
		}
		
		private void attach_M_Place_Groups(M_Place_Groups entity)
		{
			this.SendPropertyChanging();
			entity.Meeting_Place = this;
		}
		
		private void detach_M_Place_Groups(M_Place_Groups entity)
		{
			this.SendPropertyChanging();
			entity.Meeting_Place = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Menu")]
	public partial class Menu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MID;
		
		private int _ParentID;
		
		private int _MenuType;
		
		private string _Title;
		
		private string _URL;
		
		private int _SortNo;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntitySet<M_Rool_Menu> _M_Rool_Menu;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMIDChanging(int value);
    partial void OnMIDChanged();
    partial void OnParentIDChanging(int value);
    partial void OnParentIDChanged();
    partial void OnMenuTypeChanging(int value);
    partial void OnMenuTypeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnSortNoChanging(int value);
    partial void OnSortNoChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public Menu()
		{
			this._M_Rool_Menu = new EntitySet<M_Rool_Menu>(new Action<M_Rool_Menu>(this.attach_M_Rool_Menu), new Action<M_Rool_Menu>(this.detach_M_Rool_Menu));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MID
		{
			get
			{
				return this._MID;
			}
			set
			{
				if ((this._MID != value))
				{
					this.OnMIDChanging(value);
					this.SendPropertyChanging();
					this._MID = value;
					this.SendPropertyChanged("MID");
					this.OnMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int NOT NULL")]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuType", DbType="Int NOT NULL")]
		public int MenuType
		{
			get
			{
				return this._MenuType;
			}
			set
			{
				if ((this._MenuType != value))
				{
					this.OnMenuTypeChanging(value);
					this.SendPropertyChanging();
					this._MenuType = value;
					this.SendPropertyChanged("MenuType");
					this.OnMenuTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortNo", DbType="Int NOT NULL")]
		public int SortNo
		{
			get
			{
				return this._SortNo;
			}
			set
			{
				if ((this._SortNo != value))
				{
					this.OnSortNoChanging(value);
					this.SendPropertyChanging();
					this._SortNo = value;
					this.SendPropertyChanged("SortNo");
					this.OnSortNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_M_Rool_Menu", Storage="_M_Rool_Menu", ThisKey="MID", OtherKey="MID")]
		public EntitySet<M_Rool_Menu> M_Rool_Menu
		{
			get
			{
				return this._M_Rool_Menu;
			}
			set
			{
				this._M_Rool_Menu.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_M_Rool_Menu(M_Rool_Menu entity)
		{
			this.SendPropertyChanging();
			entity.Menu = this;
		}
		
		private void detach_M_Rool_Menu(M_Rool_Menu entity)
		{
			this.SendPropertyChanging();
			entity.Menu = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Organize")]
	public partial class Organize : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OID;
		
		private string _ItemID;
		
		private int _ParentID;
		
		private string _LevelTitle;
		
		private string _LeaderTitle;
		
		private int _LeaderACID;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntitySet<M_Organize_Account> _M_Organize_Account;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(int value);
    partial void OnOIDChanged();
    partial void OnItemIDChanging(string value);
    partial void OnItemIDChanged();
    partial void OnParentIDChanging(int value);
    partial void OnParentIDChanged();
    partial void OnLevelTitleChanging(string value);
    partial void OnLevelTitleChanged();
    partial void OnLeaderTitleChanging(string value);
    partial void OnLeaderTitleChanged();
    partial void OnLeaderACIDChanging(int value);
    partial void OnLeaderACIDChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public Organize()
		{
			this._M_Organize_Account = new EntitySet<M_Organize_Account>(new Action<M_Organize_Account>(this.attach_M_Organize_Account), new Action<M_Organize_Account>(this.detach_M_Organize_Account));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="VarChar(20)")]
		public string ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int NOT NULL")]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelTitle", DbType="NVarChar(10)")]
		public string LevelTitle
		{
			get
			{
				return this._LevelTitle;
			}
			set
			{
				if ((this._LevelTitle != value))
				{
					this.OnLevelTitleChanging(value);
					this.SendPropertyChanging();
					this._LevelTitle = value;
					this.SendPropertyChanged("LevelTitle");
					this.OnLevelTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaderTitle", DbType="NVarChar(10)")]
		public string LeaderTitle
		{
			get
			{
				return this._LeaderTitle;
			}
			set
			{
				if ((this._LeaderTitle != value))
				{
					this.OnLeaderTitleChanging(value);
					this.SendPropertyChanging();
					this._LeaderTitle = value;
					this.SendPropertyChanged("LeaderTitle");
					this.OnLeaderTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaderACID", DbType="Int NOT NULL")]
		public int LeaderACID
		{
			get
			{
				return this._LeaderACID;
			}
			set
			{
				if ((this._LeaderACID != value))
				{
					this.OnLeaderACIDChanging(value);
					this.SendPropertyChanging();
					this._LeaderACID = value;
					this.SendPropertyChanged("LeaderACID");
					this.OnLeaderACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organize_M_Organize_Account", Storage="_M_Organize_Account", ThisKey="OID", OtherKey="OID")]
		public EntitySet<M_Organize_Account> M_Organize_Account
		{
			get
			{
				return this._M_Organize_Account;
			}
			set
			{
				this._M_Organize_Account.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_M_Organize_Account(M_Organize_Account entity)
		{
			this.SendPropertyChanging();
			entity.Organize = this;
		}
		
		private void detach_M_Organize_Account(M_Organize_Account entity)
		{
			this.SendPropertyChanging();
			entity.Organize = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rool")]
	public partial class Rool : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RID;
		
		private int _ParentID;
		
		private int _OID;
		
		private string _Title;
		
		private int _RoolType;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntitySet<M_Rool_Account> _M_Rool_Account;
		
		private EntitySet<M_Rool_Menu> _M_Rool_Menu;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRIDChanging(int value);
    partial void OnRIDChanged();
    partial void OnParentIDChanging(int value);
    partial void OnParentIDChanged();
    partial void OnOIDChanging(int value);
    partial void OnOIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnRoolTypeChanging(int value);
    partial void OnRoolTypeChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public Rool()
		{
			this._M_Rool_Account = new EntitySet<M_Rool_Account>(new Action<M_Rool_Account>(this.attach_M_Rool_Account), new Action<M_Rool_Account>(this.detach_M_Rool_Account));
			this._M_Rool_Menu = new EntitySet<M_Rool_Menu>(new Action<M_Rool_Menu>(this.attach_M_Rool_Menu), new Action<M_Rool_Menu>(this.detach_M_Rool_Menu));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RID
		{
			get
			{
				return this._RID;
			}
			set
			{
				if ((this._RID != value))
				{
					this.OnRIDChanging(value);
					this.SendPropertyChanging();
					this._RID = value;
					this.SendPropertyChanged("RID");
					this.OnRIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int NOT NULL")]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OID", DbType="Int NOT NULL")]
		public int OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoolType", DbType="Int NOT NULL")]
		public int RoolType
		{
			get
			{
				return this._RoolType;
			}
			set
			{
				if ((this._RoolType != value))
				{
					this.OnRoolTypeChanging(value);
					this.SendPropertyChanging();
					this._RoolType = value;
					this.SendPropertyChanged("RoolType");
					this.OnRoolTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rool_M_Rool_Account", Storage="_M_Rool_Account", ThisKey="RID", OtherKey="RID")]
		public EntitySet<M_Rool_Account> M_Rool_Account
		{
			get
			{
				return this._M_Rool_Account;
			}
			set
			{
				this._M_Rool_Account.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rool_M_Rool_Menu", Storage="_M_Rool_Menu", ThisKey="RID", OtherKey="RID")]
		public EntitySet<M_Rool_Menu> M_Rool_Menu
		{
			get
			{
				return this._M_Rool_Menu;
			}
			set
			{
				this._M_Rool_Menu.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_M_Rool_Account(M_Rool_Account entity)
		{
			this.SendPropertyChanging();
			entity.Rool = this;
		}
		
		private void detach_M_Rool_Account(M_Rool_Account entity)
		{
			this.SendPropertyChanging();
			entity.Rool = null;
		}
		
		private void attach_M_Rool_Menu(M_Rool_Menu entity)
		{
			this.SendPropertyChanging();
			entity.Rool = this;
		}
		
		private void detach_M_Rool_Menu(M_Rool_Menu entity)
		{
			this.SendPropertyChanging();
			entity.Rool = null;
		}
	}
}
#pragma warning restore 1591
