#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Banner
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="db_Banner")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 擴充性方法定義
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertZipCode(ZipCode instance);
    partial void UpdateZipCode(ZipCode instance);
    partial void DeleteZipCode(ZipCode instance);
    partial void InsertAccount_Bank(Account_Bank instance);
    partial void UpdateAccount_Bank(Account_Bank instance);
    partial void DeleteAccount_Bank(Account_Bank instance);
    partial void InsertAccount_Note(Account_Note instance);
    partial void UpdateAccount_Note(Account_Note instance);
    partial void DeleteAccount_Note(Account_Note instance);
    partial void InsertBank(Bank instance);
    partial void UpdateBank(Bank instance);
    partial void DeleteBank(Bank instance);
    partial void InsertBaptized(Baptized instance);
    partial void UpdateBaptized(Baptized instance);
    partial void DeleteBaptized(Baptized instance);
    partial void InsertCommunity(Community instance);
    partial void UpdateCommunity(Community instance);
    partial void DeleteCommunity(Community instance);
    partial void InsertJoinGroupWish(JoinGroupWish instance);
    partial void UpdateJoinGroupWish(JoinGroupWish instance);
    partial void DeleteJoinGroupWish(JoinGroupWish instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertM_Location_Set(M_Location_Set instance);
    partial void UpdateM_Location_Set(M_Location_Set instance);
    partial void DeleteM_Location_Set(M_Location_Set instance);
    partial void InsertM_ML_Account(M_ML_Account instance);
    partial void UpdateM_ML_Account(M_ML_Account instance);
    partial void DeleteM_ML_Account(M_ML_Account instance);
    partial void InsertM_O_Account(M_O_Account instance);
    partial void UpdateM_O_Account(M_O_Account instance);
    partial void DeleteM_O_Account(M_O_Account instance);
    partial void InsertM_OI_Account(M_OI_Account instance);
    partial void UpdateM_OI_Account(M_OI_Account instance);
    partial void DeleteM_OI_Account(M_OI_Account instance);
    partial void InsertM_OI2_Account(M_OI2_Account instance);
    partial void UpdateM_OI2_Account(M_OI2_Account instance);
    partial void DeleteM_OI2_Account(M_OI2_Account instance);
    partial void InsertM_Rool_Account(M_Rool_Account instance);
    partial void UpdateM_Rool_Account(M_Rool_Account instance);
    partial void DeleteM_Rool_Account(M_Rool_Account instance);
    partial void InsertM_Rool_Menu(M_Rool_Menu instance);
    partial void UpdateM_Rool_Menu(M_Rool_Menu instance);
    partial void DeleteM_Rool_Menu(M_Rool_Menu instance);
    partial void InsertMeeting_Location(Meeting_Location instance);
    partial void UpdateMeeting_Location(Meeting_Location instance);
    partial void DeleteMeeting_Location(Meeting_Location instance);
    partial void InsertMenu(Menu instance);
    partial void UpdateMenu(Menu instance);
    partial void DeleteMenu(Menu instance);
    partial void InsertOrganize(Organize instance);
    partial void UpdateOrganize(Organize instance);
    partial void DeleteOrganize(Organize instance);
    partial void InsertOrganizeInfo(OrganizeInfo instance);
    partial void UpdateOrganizeInfo(OrganizeInfo instance);
    partial void DeleteOrganizeInfo(OrganizeInfo instance);
    partial void InsertRool(Rool instance);
    partial void UpdateRool(Rool instance);
    partial void DeleteRool(Rool instance);
    partial void InsertContect(Contect instance);
    partial void UpdateContect(Contect instance);
    partial void DeleteContect(Contect instance);
    partial void InsertFamily(Family instance);
    partial void UpdateFamily(Family instance);
    partial void DeleteFamily(Family instance);
    partial void InsertAccount_Performance(Account_Performance instance);
    partial void UpdateAccount_Performance(Account_Performance instance);
    partial void DeleteAccount_Performance(Account_Performance instance);
    partial void InsertCourse_Category(Course_Category instance);
    partial void UpdateCourse_Category(Course_Category instance);
    partial void DeleteCourse_Category(Course_Category instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    #endregion
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Account
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<ZipCode> ZipCode
		{
			get
			{
				return this.GetTable<ZipCode>();
			}
		}
		
		public System.Data.Linq.Table<Account_Bank> Account_Bank
		{
			get
			{
				return this.GetTable<Account_Bank>();
			}
		}
		
		public System.Data.Linq.Table<Account_Note> Account_Note
		{
			get
			{
				return this.GetTable<Account_Note>();
			}
		}
		
		public System.Data.Linq.Table<Bank> Bank
		{
			get
			{
				return this.GetTable<Bank>();
			}
		}
		
		public System.Data.Linq.Table<Baptized> Baptized
		{
			get
			{
				return this.GetTable<Baptized>();
			}
		}
		
		public System.Data.Linq.Table<Community> Community
		{
			get
			{
				return this.GetTable<Community>();
			}
		}
		
		public System.Data.Linq.Table<JoinGroupWish> JoinGroupWish
		{
			get
			{
				return this.GetTable<JoinGroupWish>();
			}
		}
		
		public System.Data.Linq.Table<Location> Location
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<M_Location_Set> M_Location_Set
		{
			get
			{
				return this.GetTable<M_Location_Set>();
			}
		}
		
		public System.Data.Linq.Table<M_ML_Account> M_ML_Account
		{
			get
			{
				return this.GetTable<M_ML_Account>();
			}
		}
		
		public System.Data.Linq.Table<M_O_Account> M_O_Account
		{
			get
			{
				return this.GetTable<M_O_Account>();
			}
		}
		
		public System.Data.Linq.Table<M_OI_Account> M_OI_Account
		{
			get
			{
				return this.GetTable<M_OI_Account>();
			}
		}
		
		public System.Data.Linq.Table<M_OI2_Account> M_OI2_Account
		{
			get
			{
				return this.GetTable<M_OI2_Account>();
			}
		}
		
		public System.Data.Linq.Table<M_Rool_Account> M_Rool_Account
		{
			get
			{
				return this.GetTable<M_Rool_Account>();
			}
		}
		
		public System.Data.Linq.Table<M_Rool_Menu> M_Rool_Menu
		{
			get
			{
				return this.GetTable<M_Rool_Menu>();
			}
		}
		
		public System.Data.Linq.Table<Meeting_Location> Meeting_Location
		{
			get
			{
				return this.GetTable<Meeting_Location>();
			}
		}
		
		public System.Data.Linq.Table<Menu> Menu
		{
			get
			{
				return this.GetTable<Menu>();
			}
		}
		
		public System.Data.Linq.Table<Organize> Organize
		{
			get
			{
				return this.GetTable<Organize>();
			}
		}
		
		public System.Data.Linq.Table<OrganizeInfo> OrganizeInfo
		{
			get
			{
				return this.GetTable<OrganizeInfo>();
			}
		}
		
		public System.Data.Linq.Table<Rool> Rool
		{
			get
			{
				return this.GetTable<Rool>();
			}
		}
		
		public System.Data.Linq.Table<Contect> Contect
		{
			get
			{
				return this.GetTable<Contect>();
			}
		}
		
		public System.Data.Linq.Table<Family> Family
		{
			get
			{
				return this.GetTable<Family>();
			}
		}
		
		public System.Data.Linq.Table<Account_Performance> Account_Performance
		{
			get
			{
				return this.GetTable<Account_Performance>();
			}
		}
		
		public System.Data.Linq.Table<Course_Category> Course_Category
		{
			get
			{
				return this.GetTable<Course_Category>();
			}
		}
		
		public System.Data.Linq.Table<Course> Course
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_GetOI2List")]
		public ISingleResult<sp_GetOI2ListResult> sp_GetOI2List([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ACID", DbType="Int")] System.Nullable<int> aCID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), aCID);
			return ((ISingleResult<sp_GetOI2ListResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ACID;
		
		private string _Login;
		
		private string _Password;
		
		private string _Name_First;
		
		private string _Name_Last;
		
		private bool _ManFlag;
		
		private string _IDNumber;
		
		private int _IDType;
		
		private System.DateTime _Birthday;
		
		private int _EducationType;
		
		private int _JobType;
		
		private int _MarriageType;
		
		private string _MarriageNote;
		
		private int _BaptizedType;
		
		private string _GroupType;
		
		private bool _BackUsedFlag;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private int _OldID;
		
		private EntitySet<Account_Bank> _Account_Bank;
		
		private EntitySet<Account_Note> _Account_Note;
		
		private EntitySet<Baptized> _Baptized;
		
		private EntitySet<Community> _Community;
		
		private EntitySet<JoinGroupWish> _JoinGroupWish;
		
		private EntitySet<M_ML_Account> _M_ML_Account;
		
		private EntitySet<M_O_Account> _M_O_Account;
		
		private EntitySet<M_OI_Account> _M_OI_Account;
		
		private EntitySet<M_OI2_Account> _M_OI2_Account;
		
		private EntitySet<M_Rool_Account> _M_Rool_Account;
		
		private EntitySet<OrganizeInfo> _OrganizeInfo;
		
		private EntitySet<Family> _Family;
		
		private EntitySet<Account_Performance> _Account_Performance;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnName_FirstChanging(string value);
    partial void OnName_FirstChanged();
    partial void OnName_LastChanging(string value);
    partial void OnName_LastChanged();
    partial void OnManFlagChanging(bool value);
    partial void OnManFlagChanged();
    partial void OnIDNumberChanging(string value);
    partial void OnIDNumberChanged();
    partial void OnIDTypeChanging(int value);
    partial void OnIDTypeChanged();
    partial void OnBirthdayChanging(System.DateTime value);
    partial void OnBirthdayChanged();
    partial void OnEducationTypeChanging(int value);
    partial void OnEducationTypeChanged();
    partial void OnJobTypeChanging(int value);
    partial void OnJobTypeChanged();
    partial void OnMarriageTypeChanging(int value);
    partial void OnMarriageTypeChanged();
    partial void OnMarriageNoteChanging(string value);
    partial void OnMarriageNoteChanged();
    partial void OnBaptizedTypeChanging(int value);
    partial void OnBaptizedTypeChanged();
    partial void OnGroupTypeChanging(string value);
    partial void OnGroupTypeChanged();
    partial void OnBackUsedFlagChanging(bool value);
    partial void OnBackUsedFlagChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    partial void OnOldIDChanging(int value);
    partial void OnOldIDChanged();
    #endregion
		
		public Account()
		{
			this._Account_Bank = new EntitySet<Account_Bank>(new Action<Account_Bank>(this.attach_Account_Bank), new Action<Account_Bank>(this.detach_Account_Bank));
			this._Account_Note = new EntitySet<Account_Note>(new Action<Account_Note>(this.attach_Account_Note), new Action<Account_Note>(this.detach_Account_Note));
			this._Baptized = new EntitySet<Baptized>(new Action<Baptized>(this.attach_Baptized), new Action<Baptized>(this.detach_Baptized));
			this._Community = new EntitySet<Community>(new Action<Community>(this.attach_Community), new Action<Community>(this.detach_Community));
			this._JoinGroupWish = new EntitySet<JoinGroupWish>(new Action<JoinGroupWish>(this.attach_JoinGroupWish), new Action<JoinGroupWish>(this.detach_JoinGroupWish));
			this._M_ML_Account = new EntitySet<M_ML_Account>(new Action<M_ML_Account>(this.attach_M_ML_Account), new Action<M_ML_Account>(this.detach_M_ML_Account));
			this._M_O_Account = new EntitySet<M_O_Account>(new Action<M_O_Account>(this.attach_M_O_Account), new Action<M_O_Account>(this.detach_M_O_Account));
			this._M_OI_Account = new EntitySet<M_OI_Account>(new Action<M_OI_Account>(this.attach_M_OI_Account), new Action<M_OI_Account>(this.detach_M_OI_Account));
			this._M_OI2_Account = new EntitySet<M_OI2_Account>(new Action<M_OI2_Account>(this.attach_M_OI2_Account), new Action<M_OI2_Account>(this.detach_M_OI2_Account));
			this._M_Rool_Account = new EntitySet<M_Rool_Account>(new Action<M_Rool_Account>(this.attach_M_Rool_Account), new Action<M_Rool_Account>(this.detach_M_Rool_Account));
			this._OrganizeInfo = new EntitySet<OrganizeInfo>(new Action<OrganizeInfo>(this.attach_OrganizeInfo), new Action<OrganizeInfo>(this.detach_OrganizeInfo));
			this._Family = new EntitySet<Family>(new Action<Family>(this.attach_Family), new Action<Family>(this.detach_Family));
			this._Account_Performance = new EntitySet<Account_Performance>(new Action<Account_Performance>(this.attach_Account_Performance), new Action<Account_Performance>(this.detach_Account_Performance));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="VarChar(100)")]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name_First", DbType="NVarChar(50)")]
		public string Name_First
		{
			get
			{
				return this._Name_First;
			}
			set
			{
				if ((this._Name_First != value))
				{
					this.OnName_FirstChanging(value);
					this.SendPropertyChanging();
					this._Name_First = value;
					this.SendPropertyChanged("Name_First");
					this.OnName_FirstChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name_Last", DbType="NVarChar(50)")]
		public string Name_Last
		{
			get
			{
				return this._Name_Last;
			}
			set
			{
				if ((this._Name_Last != value))
				{
					this.OnName_LastChanging(value);
					this.SendPropertyChanging();
					this._Name_Last = value;
					this.SendPropertyChanged("Name_Last");
					this.OnName_LastChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManFlag", DbType="Bit NOT NULL")]
		public bool ManFlag
		{
			get
			{
				return this._ManFlag;
			}
			set
			{
				if ((this._ManFlag != value))
				{
					this.OnManFlagChanging(value);
					this.SendPropertyChanging();
					this._ManFlag = value;
					this.SendPropertyChanged("ManFlag");
					this.OnManFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNumber", DbType="VarChar(30)")]
		public string IDNumber
		{
			get
			{
				return this._IDNumber;
			}
			set
			{
				if ((this._IDNumber != value))
				{
					this.OnIDNumberChanging(value);
					this.SendPropertyChanging();
					this._IDNumber = value;
					this.SendPropertyChanged("IDNumber");
					this.OnIDNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDType", DbType="Int NOT NULL")]
		public int IDType
		{
			get
			{
				return this._IDType;
			}
			set
			{
				if ((this._IDType != value))
				{
					this.OnIDTypeChanging(value);
					this.SendPropertyChanging();
					this._IDType = value;
					this.SendPropertyChanged("IDType");
					this.OnIDTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="DateTime NOT NULL")]
		public System.DateTime Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EducationType", DbType="Int NOT NULL")]
		public int EducationType
		{
			get
			{
				return this._EducationType;
			}
			set
			{
				if ((this._EducationType != value))
				{
					this.OnEducationTypeChanging(value);
					this.SendPropertyChanging();
					this._EducationType = value;
					this.SendPropertyChanged("EducationType");
					this.OnEducationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobType", DbType="Int NOT NULL")]
		public int JobType
		{
			get
			{
				return this._JobType;
			}
			set
			{
				if ((this._JobType != value))
				{
					this.OnJobTypeChanging(value);
					this.SendPropertyChanging();
					this._JobType = value;
					this.SendPropertyChanged("JobType");
					this.OnJobTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarriageType", DbType="Int NOT NULL")]
		public int MarriageType
		{
			get
			{
				return this._MarriageType;
			}
			set
			{
				if ((this._MarriageType != value))
				{
					this.OnMarriageTypeChanging(value);
					this.SendPropertyChanging();
					this._MarriageType = value;
					this.SendPropertyChanged("MarriageType");
					this.OnMarriageTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarriageNote", DbType="NVarChar(100)")]
		public string MarriageNote
		{
			get
			{
				return this._MarriageNote;
			}
			set
			{
				if ((this._MarriageNote != value))
				{
					this.OnMarriageNoteChanging(value);
					this.SendPropertyChanging();
					this._MarriageNote = value;
					this.SendPropertyChanged("MarriageNote");
					this.OnMarriageNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaptizedType", DbType="Int NOT NULL")]
		public int BaptizedType
		{
			get
			{
				return this._BaptizedType;
			}
			set
			{
				if ((this._BaptizedType != value))
				{
					this.OnBaptizedTypeChanging(value);
					this.SendPropertyChanging();
					this._BaptizedType = value;
					this.SendPropertyChanged("BaptizedType");
					this.OnBaptizedTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupType", DbType="NVarChar(50)")]
		public string GroupType
		{
			get
			{
				return this._GroupType;
			}
			set
			{
				if ((this._GroupType != value))
				{
					this.OnGroupTypeChanging(value);
					this.SendPropertyChanging();
					this._GroupType = value;
					this.SendPropertyChanged("GroupType");
					this.OnGroupTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackUsedFlag", DbType="Bit NOT NULL")]
		public bool BackUsedFlag
		{
			get
			{
				return this._BackUsedFlag;
			}
			set
			{
				if ((this._BackUsedFlag != value))
				{
					this.OnBackUsedFlagChanging(value);
					this.SendPropertyChanging();
					this._BackUsedFlag = value;
					this.SendPropertyChanged("BackUsedFlag");
					this.OnBackUsedFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldID", DbType="Int NOT NULL")]
		public int OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Account_Bank", Storage="_Account_Bank", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<Account_Bank> Account_Bank
		{
			get
			{
				return this._Account_Bank;
			}
			set
			{
				this._Account_Bank.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Account_Note", Storage="_Account_Note", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<Account_Note> Account_Note
		{
			get
			{
				return this._Account_Note;
			}
			set
			{
				this._Account_Note.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Baptized", Storage="_Baptized", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<Baptized> Baptized
		{
			get
			{
				return this._Baptized;
			}
			set
			{
				this._Baptized.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Community", Storage="_Community", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<Community> Community
		{
			get
			{
				return this._Community;
			}
			set
			{
				this._Community.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_JoinGroupWish", Storage="_JoinGroupWish", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<JoinGroupWish> JoinGroupWish
		{
			get
			{
				return this._JoinGroupWish;
			}
			set
			{
				this._JoinGroupWish.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_M_ML_Account", Storage="_M_ML_Account", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<M_ML_Account> M_ML_Account
		{
			get
			{
				return this._M_ML_Account;
			}
			set
			{
				this._M_ML_Account.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_M_O_Account", Storage="_M_O_Account", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<M_O_Account> M_O_Account
		{
			get
			{
				return this._M_O_Account;
			}
			set
			{
				this._M_O_Account.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_M_OI_Account", Storage="_M_OI_Account", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<M_OI_Account> M_OI_Account
		{
			get
			{
				return this._M_OI_Account;
			}
			set
			{
				this._M_OI_Account.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_M_OI2_Account", Storage="_M_OI2_Account", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<M_OI2_Account> M_OI2_Account
		{
			get
			{
				return this._M_OI2_Account;
			}
			set
			{
				this._M_OI2_Account.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_M_Rool_Account", Storage="_M_Rool_Account", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<M_Rool_Account> M_Rool_Account
		{
			get
			{
				return this._M_Rool_Account;
			}
			set
			{
				this._M_Rool_Account.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_OrganizeInfo", Storage="_OrganizeInfo", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<OrganizeInfo> OrganizeInfo
		{
			get
			{
				return this._OrganizeInfo;
			}
			set
			{
				this._OrganizeInfo.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Family", Storage="_Family", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<Family> Family
		{
			get
			{
				return this._Family;
			}
			set
			{
				this._Family.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Account_Performance", Storage="_Account_Performance", ThisKey="ACID", OtherKey="ACID")]
		public EntitySet<Account_Performance> Account_Performance
		{
			get
			{
				return this._Account_Performance;
			}
			set
			{
				this._Account_Performance.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Account_Bank(Account_Bank entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Account_Bank(Account_Bank entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Account_Note(Account_Note entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Account_Note(Account_Note entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Baptized(Baptized entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Baptized(Baptized entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Community(Community entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Community(Community entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_JoinGroupWish(JoinGroupWish entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_JoinGroupWish(JoinGroupWish entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_M_ML_Account(M_ML_Account entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_M_ML_Account(M_ML_Account entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_M_O_Account(M_O_Account entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_M_O_Account(M_O_Account entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_M_OI_Account(M_OI_Account entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_M_OI_Account(M_OI_Account entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_M_OI2_Account(M_OI2_Account entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_M_OI2_Account(M_OI2_Account entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_M_Rool_Account(M_Rool_Account entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_M_Rool_Account(M_Rool_Account entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_OrganizeInfo(OrganizeInfo entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_OrganizeInfo(OrganizeInfo entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Family(Family entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Family(Family entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Account_Performance(Account_Performance entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Account_Performance(Account_Performance entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ZipCode")]
	public partial class ZipCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ZID;
		
		private int _ParentID;
		
		private string _Code;
		
		private string _Title;
		
		private string _GroupName;
		
		private string _Note;
		
		private bool _ActiveFlag;
		
		private EntitySet<Location> _Location;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZIDChanging(int value);
    partial void OnZIDChanged();
    partial void OnParentIDChanging(int value);
    partial void OnParentIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    #endregion
		
		public ZipCode()
		{
			this._Location = new EntitySet<Location>(new Action<Location>(this.attach_Location), new Action<Location>(this.detach_Location));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ZID
		{
			get
			{
				return this._ZID;
			}
			set
			{
				if ((this._ZID != value))
				{
					this.OnZIDChanging(value);
					this.SendPropertyChanging();
					this._ZID = value;
					this.SendPropertyChanged("ZID");
					this.OnZIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int NOT NULL")]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(20)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(200)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(200)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(200)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ZipCode_Location", Storage="_Location", ThisKey="ZID", OtherKey="ZID")]
		public EntitySet<Location> Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				this._Location.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Location(Location entity)
		{
			this.SendPropertyChanging();
			entity.ZipCode = this;
		}
		
		private void detach_Location(Location entity)
		{
			this.SendPropertyChanging();
			entity.ZipCode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account_Bank")]
	public partial class Account_Bank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ABID;
		
		private int _ACID;
		
		private int _BID;
		
		private string _Title;
		
		private string _BankNo;
		
		private string _AccountNo;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Bank> _Bank;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnABIDChanging(int value);
    partial void OnABIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnBIDChanging(int value);
    partial void OnBIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBankNoChanging(string value);
    partial void OnBankNoChanged();
    partial void OnAccountNoChanging(string value);
    partial void OnAccountNoChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public Account_Bank()
		{
			this._Account = default(EntityRef<Account>);
			this._Bank = default(EntityRef<Bank>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ABID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ABID
		{
			get
			{
				return this._ABID;
			}
			set
			{
				if ((this._ABID != value))
				{
					this.OnABIDChanging(value);
					this.SendPropertyChanging();
					this._ABID = value;
					this.SendPropertyChanged("ABID");
					this.OnABIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BID", DbType="Int NOT NULL")]
		public int BID
		{
			get
			{
				return this._BID;
			}
			set
			{
				if ((this._BID != value))
				{
					if (this._Bank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBIDChanging(value);
					this.SendPropertyChanging();
					this._BID = value;
					this.SendPropertyChanged("BID");
					this.OnBIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BankNo
		{
			get
			{
				return this._BankNo;
			}
			set
			{
				if ((this._BankNo != value))
				{
					this.OnBankNoChanging(value);
					this.SendPropertyChanging();
					this._BankNo = value;
					this.SendPropertyChanged("BankNo");
					this.OnBankNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AccountNo
		{
			get
			{
				return this._AccountNo;
			}
			set
			{
				if ((this._AccountNo != value))
				{
					this.OnAccountNoChanging(value);
					this.SendPropertyChanging();
					this._AccountNo = value;
					this.SendPropertyChanged("AccountNo");
					this.OnAccountNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Account_Bank", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Account_Bank.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Account_Bank.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_Account_Bank", Storage="_Bank", ThisKey="BID", OtherKey="BID", IsForeignKey=true)]
		public Bank Bank
		{
			get
			{
				return this._Bank.Entity;
			}
			set
			{
				Bank previousValue = this._Bank.Entity;
				if (((previousValue != value) 
							|| (this._Bank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bank.Entity = null;
						previousValue.Account_Bank.Remove(this);
					}
					this._Bank.Entity = value;
					if ((value != null))
					{
						value.Account_Bank.Add(this);
						this._BID = value.BID;
					}
					else
					{
						this._BID = default(int);
					}
					this.SendPropertyChanged("Bank");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account_Note")]
	public partial class Account_Note : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ANID;
		
		private int _ACID;
		
		private int _OIID;
		
		private int _NoteType;
		
		private string _Note;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntityRef<Account> _Account;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnANIDChanging(int value);
    partial void OnANIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnOIIDChanging(int value);
    partial void OnOIIDChanged();
    partial void OnNoteTypeChanging(int value);
    partial void OnNoteTypeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public Account_Note()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ANID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ANID
		{
			get
			{
				return this._ANID;
			}
			set
			{
				if ((this._ANID != value))
				{
					this.OnANIDChanging(value);
					this.SendPropertyChanging();
					this._ANID = value;
					this.SendPropertyChanged("ANID");
					this.OnANIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OIID", DbType="Int NOT NULL")]
		public int OIID
		{
			get
			{
				return this._OIID;
			}
			set
			{
				if ((this._OIID != value))
				{
					this.OnOIIDChanging(value);
					this.SendPropertyChanging();
					this._OIID = value;
					this.SendPropertyChanged("OIID");
					this.OnOIIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoteType", DbType="Int NOT NULL")]
		public int NoteType
		{
			get
			{
				return this._NoteType;
			}
			set
			{
				if ((this._NoteType != value))
				{
					this.OnNoteTypeChanging(value);
					this.SendPropertyChanging();
					this._NoteType = value;
					this.SendPropertyChanged("NoteType");
					this.OnNoteTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Account_Note", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Account_Note.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Account_Note.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bank")]
	public partial class Bank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BID;
		
		private int _BankNo;
		
		private int _BankType;
		
		private string _Title;
		
		private bool _ActiveFlag;
		
		private EntitySet<Account_Bank> _Account_Bank;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBIDChanging(int value);
    partial void OnBIDChanged();
    partial void OnBankNoChanging(int value);
    partial void OnBankNoChanged();
    partial void OnBankTypeChanging(int value);
    partial void OnBankTypeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    #endregion
		
		public Bank()
		{
			this._Account_Bank = new EntitySet<Account_Bank>(new Action<Account_Bank>(this.attach_Account_Bank), new Action<Account_Bank>(this.detach_Account_Bank));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BID
		{
			get
			{
				return this._BID;
			}
			set
			{
				if ((this._BID != value))
				{
					this.OnBIDChanging(value);
					this.SendPropertyChanging();
					this._BID = value;
					this.SendPropertyChanged("BID");
					this.OnBIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankNo", DbType="Int NOT NULL")]
		public int BankNo
		{
			get
			{
				return this._BankNo;
			}
			set
			{
				if ((this._BankNo != value))
				{
					this.OnBankNoChanging(value);
					this.SendPropertyChanging();
					this._BankNo = value;
					this.SendPropertyChanged("BankNo");
					this.OnBankNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankType", DbType="Int NOT NULL")]
		public int BankType
		{
			get
			{
				return this._BankType;
			}
			set
			{
				if ((this._BankType != value))
				{
					this.OnBankTypeChanging(value);
					this.SendPropertyChanging();
					this._BankType = value;
					this.SendPropertyChanged("BankType");
					this.OnBankTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_Account_Bank", Storage="_Account_Bank", ThisKey="BID", OtherKey="BID")]
		public EntitySet<Account_Bank> Account_Bank
		{
			get
			{
				return this._Account_Bank;
			}
			set
			{
				this._Account_Bank.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Account_Bank(Account_Bank entity)
		{
			this.SendPropertyChanging();
			entity.Bank = this;
		}
		
		private void detach_Account_Bank(Account_Bank entity)
		{
			this.SendPropertyChanging();
			entity.Bank = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Baptized")]
	public partial class Baptized : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BID;
		
		private int _OIID;
		
		private int _ACID;
		
		private System.DateTime _BaptismDate;
		
		private bool _ImplementFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntityRef<Account> _Account;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBIDChanging(int value);
    partial void OnBIDChanged();
    partial void OnOIIDChanging(int value);
    partial void OnOIIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnBaptismDateChanging(System.DateTime value);
    partial void OnBaptismDateChanged();
    partial void OnImplementFlagChanging(bool value);
    partial void OnImplementFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public Baptized()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BID
		{
			get
			{
				return this._BID;
			}
			set
			{
				if ((this._BID != value))
				{
					this.OnBIDChanging(value);
					this.SendPropertyChanging();
					this._BID = value;
					this.SendPropertyChanged("BID");
					this.OnBIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OIID", DbType="Int NOT NULL")]
		public int OIID
		{
			get
			{
				return this._OIID;
			}
			set
			{
				if ((this._OIID != value))
				{
					this.OnOIIDChanging(value);
					this.SendPropertyChanging();
					this._OIID = value;
					this.SendPropertyChanged("OIID");
					this.OnOIIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaptismDate", DbType="DateTime NOT NULL")]
		public System.DateTime BaptismDate
		{
			get
			{
				return this._BaptismDate;
			}
			set
			{
				if ((this._BaptismDate != value))
				{
					this.OnBaptismDateChanging(value);
					this.SendPropertyChanging();
					this._BaptismDate = value;
					this.SendPropertyChanged("BaptismDate");
					this.OnBaptismDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImplementFlag", DbType="Bit NOT NULL")]
		public bool ImplementFlag
		{
			get
			{
				return this._ImplementFlag;
			}
			set
			{
				if ((this._ImplementFlag != value))
				{
					this.OnImplementFlagChanging(value);
					this.SendPropertyChanging();
					this._ImplementFlag = value;
					this.SendPropertyChanged("ImplementFlag");
					this.OnImplementFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Baptized", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Baptized.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Baptized.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Community")]
	public partial class Community : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CID;
		
		private int _ACID;
		
		private int _CommunityType;
		
		private string _CommunityValue;
		
		private EntityRef<Account> _Account;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(int value);
    partial void OnCIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnCommunityTypeChanging(int value);
    partial void OnCommunityTypeChanged();
    partial void OnCommunityValueChanging(string value);
    partial void OnCommunityValueChanged();
    #endregion
		
		public Community()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommunityType", DbType="Int NOT NULL")]
		public int CommunityType
		{
			get
			{
				return this._CommunityType;
			}
			set
			{
				if ((this._CommunityType != value))
				{
					this.OnCommunityTypeChanging(value);
					this.SendPropertyChanging();
					this._CommunityType = value;
					this.SendPropertyChanged("CommunityType");
					this.OnCommunityTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommunityValue", DbType="VarChar(300)")]
		public string CommunityValue
		{
			get
			{
				return this._CommunityValue;
			}
			set
			{
				if ((this._CommunityValue != value))
				{
					this.OnCommunityValueChanging(value);
					this.SendPropertyChanging();
					this._CommunityValue = value;
					this.SendPropertyChanged("CommunityValue");
					this.OnCommunityValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Community", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Community.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Community.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JoinGroupWish")]
	public partial class JoinGroupWish : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JGWID;
		
		private int _ACID;
		
		private int _JoinType;
		
		private int _SortNo;
		
		private int _WeeklyNo;
		
		private int _TimeNo;
		
		private EntityRef<Account> _Account;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJGWIDChanging(int value);
    partial void OnJGWIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnJoinTypeChanging(int value);
    partial void OnJoinTypeChanged();
    partial void OnSortNoChanging(int value);
    partial void OnSortNoChanged();
    partial void OnWeeklyNoChanging(int value);
    partial void OnWeeklyNoChanged();
    partial void OnTimeNoChanging(int value);
    partial void OnTimeNoChanged();
    #endregion
		
		public JoinGroupWish()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JGWID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JGWID
		{
			get
			{
				return this._JGWID;
			}
			set
			{
				if ((this._JGWID != value))
				{
					this.OnJGWIDChanging(value);
					this.SendPropertyChanging();
					this._JGWID = value;
					this.SendPropertyChanged("JGWID");
					this.OnJGWIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JoinType", DbType="Int NOT NULL")]
		public int JoinType
		{
			get
			{
				return this._JoinType;
			}
			set
			{
				if ((this._JoinType != value))
				{
					this.OnJoinTypeChanging(value);
					this.SendPropertyChanging();
					this._JoinType = value;
					this.SendPropertyChanged("JoinType");
					this.OnJoinTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortNo", DbType="Int NOT NULL")]
		public int SortNo
		{
			get
			{
				return this._SortNo;
			}
			set
			{
				if ((this._SortNo != value))
				{
					this.OnSortNoChanging(value);
					this.SendPropertyChanging();
					this._SortNo = value;
					this.SendPropertyChanged("SortNo");
					this.OnSortNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeeklyNo", DbType="Int NOT NULL")]
		public int WeeklyNo
		{
			get
			{
				return this._WeeklyNo;
			}
			set
			{
				if ((this._WeeklyNo != value))
				{
					this.OnWeeklyNoChanging(value);
					this.SendPropertyChanging();
					this._WeeklyNo = value;
					this.SendPropertyChanged("WeeklyNo");
					this.OnWeeklyNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeNo", DbType="Int NOT NULL")]
		public int TimeNo
		{
			get
			{
				return this._TimeNo;
			}
			set
			{
				if ((this._TimeNo != value))
				{
					this.OnTimeNoChanging(value);
					this.SendPropertyChanging();
					this._TimeNo = value;
					this.SendPropertyChanged("TimeNo");
					this.OnTimeNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_JoinGroupWish", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.JoinGroupWish.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.JoinGroupWish.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LID;
		
		private int _TargetType;
		
		private int _TargetID;
		
		private int _ZID;
		
		private string _Address;
		
		private EntityRef<ZipCode> _ZipCode;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLIDChanging(int value);
    partial void OnLIDChanged();
    partial void OnTargetTypeChanging(int value);
    partial void OnTargetTypeChanged();
    partial void OnTargetIDChanging(int value);
    partial void OnTargetIDChanged();
    partial void OnZIDChanging(int value);
    partial void OnZIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Location()
		{
			this._ZipCode = default(EntityRef<ZipCode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LID
		{
			get
			{
				return this._LID;
			}
			set
			{
				if ((this._LID != value))
				{
					this.OnLIDChanging(value);
					this.SendPropertyChanging();
					this._LID = value;
					this.SendPropertyChanged("LID");
					this.OnLIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetType", DbType="Int NOT NULL")]
		public int TargetType
		{
			get
			{
				return this._TargetType;
			}
			set
			{
				if ((this._TargetType != value))
				{
					this.OnTargetTypeChanging(value);
					this.SendPropertyChanging();
					this._TargetType = value;
					this.SendPropertyChanged("TargetType");
					this.OnTargetTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetID", DbType="Int NOT NULL")]
		public int TargetID
		{
			get
			{
				return this._TargetID;
			}
			set
			{
				if ((this._TargetID != value))
				{
					this.OnTargetIDChanging(value);
					this.SendPropertyChanging();
					this._TargetID = value;
					this.SendPropertyChanged("TargetID");
					this.OnTargetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZID", DbType="Int NOT NULL")]
		public int ZID
		{
			get
			{
				return this._ZID;
			}
			set
			{
				if ((this._ZID != value))
				{
					if (this._ZipCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnZIDChanging(value);
					this.SendPropertyChanging();
					this._ZID = value;
					this.SendPropertyChanged("ZID");
					this.OnZIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(300)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ZipCode_Location", Storage="_ZipCode", ThisKey="ZID", OtherKey="ZID", IsForeignKey=true)]
		public ZipCode ZipCode
		{
			get
			{
				return this._ZipCode.Entity;
			}
			set
			{
				ZipCode previousValue = this._ZipCode.Entity;
				if (((previousValue != value) 
							|| (this._ZipCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ZipCode.Entity = null;
						previousValue.Location.Remove(this);
					}
					this._ZipCode.Entity = value;
					if ((value != null))
					{
						value.Location.Add(this);
						this._ZID = value.ZID;
					}
					else
					{
						this._ZID = default(int);
					}
					this.SendPropertyChanged("ZipCode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.M_Location_Set")]
	public partial class M_Location_Set : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MID;
		
		private int _MLID;
		
		private int _SetType;
		
		private int _TargetID;
		
		private int _WeeklyNo;
		
		private int _TimeNo;
		
		private int _S_hour;
		
		private int _S_minute;
		
		private int _E_hour;
		
		private int _E_minute;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntityRef<Meeting_Location> _Meeting_Location;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMIDChanging(int value);
    partial void OnMIDChanged();
    partial void OnMLIDChanging(int value);
    partial void OnMLIDChanged();
    partial void OnSetTypeChanging(int value);
    partial void OnSetTypeChanged();
    partial void OnTargetIDChanging(int value);
    partial void OnTargetIDChanged();
    partial void OnWeeklyNoChanging(int value);
    partial void OnWeeklyNoChanged();
    partial void OnTimeNoChanging(int value);
    partial void OnTimeNoChanged();
    partial void OnS_hourChanging(int value);
    partial void OnS_hourChanged();
    partial void OnS_minuteChanging(int value);
    partial void OnS_minuteChanged();
    partial void OnE_hourChanging(int value);
    partial void OnE_hourChanged();
    partial void OnE_minuteChanging(int value);
    partial void OnE_minuteChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public M_Location_Set()
		{
			this._Meeting_Location = default(EntityRef<Meeting_Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MID
		{
			get
			{
				return this._MID;
			}
			set
			{
				if ((this._MID != value))
				{
					this.OnMIDChanging(value);
					this.SendPropertyChanging();
					this._MID = value;
					this.SendPropertyChanged("MID");
					this.OnMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MLID", DbType="Int NOT NULL")]
		public int MLID
		{
			get
			{
				return this._MLID;
			}
			set
			{
				if ((this._MLID != value))
				{
					if (this._Meeting_Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMLIDChanging(value);
					this.SendPropertyChanging();
					this._MLID = value;
					this.SendPropertyChanged("MLID");
					this.OnMLIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetType", DbType="Int NOT NULL")]
		public int SetType
		{
			get
			{
				return this._SetType;
			}
			set
			{
				if ((this._SetType != value))
				{
					this.OnSetTypeChanging(value);
					this.SendPropertyChanging();
					this._SetType = value;
					this.SendPropertyChanged("SetType");
					this.OnSetTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetID", DbType="Int NOT NULL")]
		public int TargetID
		{
			get
			{
				return this._TargetID;
			}
			set
			{
				if ((this._TargetID != value))
				{
					this.OnTargetIDChanging(value);
					this.SendPropertyChanging();
					this._TargetID = value;
					this.SendPropertyChanged("TargetID");
					this.OnTargetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeeklyNo", DbType="Int NOT NULL")]
		public int WeeklyNo
		{
			get
			{
				return this._WeeklyNo;
			}
			set
			{
				if ((this._WeeklyNo != value))
				{
					this.OnWeeklyNoChanging(value);
					this.SendPropertyChanging();
					this._WeeklyNo = value;
					this.SendPropertyChanged("WeeklyNo");
					this.OnWeeklyNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeNo", DbType="Int NOT NULL")]
		public int TimeNo
		{
			get
			{
				return this._TimeNo;
			}
			set
			{
				if ((this._TimeNo != value))
				{
					this.OnTimeNoChanging(value);
					this.SendPropertyChanging();
					this._TimeNo = value;
					this.SendPropertyChanged("TimeNo");
					this.OnTimeNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_hour", DbType="Int NOT NULL")]
		public int S_hour
		{
			get
			{
				return this._S_hour;
			}
			set
			{
				if ((this._S_hour != value))
				{
					this.OnS_hourChanging(value);
					this.SendPropertyChanging();
					this._S_hour = value;
					this.SendPropertyChanged("S_hour");
					this.OnS_hourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_minute", DbType="Int NOT NULL")]
		public int S_minute
		{
			get
			{
				return this._S_minute;
			}
			set
			{
				if ((this._S_minute != value))
				{
					this.OnS_minuteChanging(value);
					this.SendPropertyChanging();
					this._S_minute = value;
					this.SendPropertyChanged("S_minute");
					this.OnS_minuteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_hour", DbType="Int NOT NULL")]
		public int E_hour
		{
			get
			{
				return this._E_hour;
			}
			set
			{
				if ((this._E_hour != value))
				{
					this.OnE_hourChanging(value);
					this.SendPropertyChanging();
					this._E_hour = value;
					this.SendPropertyChanged("E_hour");
					this.OnE_hourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_minute", DbType="Int NOT NULL")]
		public int E_minute
		{
			get
			{
				return this._E_minute;
			}
			set
			{
				if ((this._E_minute != value))
				{
					this.OnE_minuteChanging(value);
					this.SendPropertyChanging();
					this._E_minute = value;
					this.SendPropertyChanged("E_minute");
					this.OnE_minuteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meeting_Location_M_Location_Set", Storage="_Meeting_Location", ThisKey="MLID", OtherKey="MLID", IsForeignKey=true)]
		public Meeting_Location Meeting_Location
		{
			get
			{
				return this._Meeting_Location.Entity;
			}
			set
			{
				Meeting_Location previousValue = this._Meeting_Location.Entity;
				if (((previousValue != value) 
							|| (this._Meeting_Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meeting_Location.Entity = null;
						previousValue.M_Location_Set.Remove(this);
					}
					this._Meeting_Location.Entity = value;
					if ((value != null))
					{
						value.M_Location_Set.Add(this);
						this._MLID = value.MLID;
					}
					else
					{
						this._MLID = default(int);
					}
					this.SendPropertyChanged("Meeting_Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.M_ML_Account")]
	public partial class M_ML_Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MID;
		
		private int _MLID;
		
		private int _ACID;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Meeting_Location> _Meeting_Location;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMIDChanging(int value);
    partial void OnMIDChanged();
    partial void OnMLIDChanging(int value);
    partial void OnMLIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public M_ML_Account()
		{
			this._Account = default(EntityRef<Account>);
			this._Meeting_Location = default(EntityRef<Meeting_Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MID
		{
			get
			{
				return this._MID;
			}
			set
			{
				if ((this._MID != value))
				{
					this.OnMIDChanging(value);
					this.SendPropertyChanging();
					this._MID = value;
					this.SendPropertyChanged("MID");
					this.OnMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MLID", DbType="Int NOT NULL")]
		public int MLID
		{
			get
			{
				return this._MLID;
			}
			set
			{
				if ((this._MLID != value))
				{
					if (this._Meeting_Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMLIDChanging(value);
					this.SendPropertyChanging();
					this._MLID = value;
					this.SendPropertyChanged("MLID");
					this.OnMLIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_M_ML_Account", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.M_ML_Account.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.M_ML_Account.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meeting_Location_M_ML_Account", Storage="_Meeting_Location", ThisKey="MLID", OtherKey="MLID", IsForeignKey=true)]
		public Meeting_Location Meeting_Location
		{
			get
			{
				return this._Meeting_Location.Entity;
			}
			set
			{
				Meeting_Location previousValue = this._Meeting_Location.Entity;
				if (((previousValue != value) 
							|| (this._Meeting_Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meeting_Location.Entity = null;
						previousValue.M_ML_Account.Remove(this);
					}
					this._Meeting_Location.Entity = value;
					if ((value != null))
					{
						value.M_ML_Account.Add(this);
						this._MLID = value.MLID;
					}
					else
					{
						this._MLID = default(int);
					}
					this.SendPropertyChanged("Meeting_Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.M_O_Account")]
	public partial class M_O_Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MID;
		
		private int _OID;
		
		private int _ACID;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Organize> _Organize;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMIDChanging(int value);
    partial void OnMIDChanged();
    partial void OnOIDChanging(int value);
    partial void OnOIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public M_O_Account()
		{
			this._Account = default(EntityRef<Account>);
			this._Organize = default(EntityRef<Organize>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MID
		{
			get
			{
				return this._MID;
			}
			set
			{
				if ((this._MID != value))
				{
					this.OnMIDChanging(value);
					this.SendPropertyChanging();
					this._MID = value;
					this.SendPropertyChanged("MID");
					this.OnMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OID", DbType="Int NOT NULL")]
		public int OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					if (this._Organize.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_M_O_Account", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.M_O_Account.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.M_O_Account.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organize_M_O_Account", Storage="_Organize", ThisKey="OID", OtherKey="OID", IsForeignKey=true)]
		public Organize Organize
		{
			get
			{
				return this._Organize.Entity;
			}
			set
			{
				Organize previousValue = this._Organize.Entity;
				if (((previousValue != value) 
							|| (this._Organize.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organize.Entity = null;
						previousValue.M_O_Account.Remove(this);
					}
					this._Organize.Entity = value;
					if ((value != null))
					{
						value.M_O_Account.Add(this);
						this._OID = value.OID;
					}
					else
					{
						this._OID = default(int);
					}
					this.SendPropertyChanged("Organize");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.M_OI_Account")]
	public partial class M_OI_Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MID;
		
		private int _OIID;
		
		private int _ACID;
		
		private System.DateTime _JoinDate;
		
		private System.DateTime _LeaveDate;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<OrganizeInfo> _OrganizeInfo;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMIDChanging(int value);
    partial void OnMIDChanged();
    partial void OnOIIDChanging(int value);
    partial void OnOIIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnJoinDateChanging(System.DateTime value);
    partial void OnJoinDateChanged();
    partial void OnLeaveDateChanging(System.DateTime value);
    partial void OnLeaveDateChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public M_OI_Account()
		{
			this._Account = default(EntityRef<Account>);
			this._OrganizeInfo = default(EntityRef<OrganizeInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MID
		{
			get
			{
				return this._MID;
			}
			set
			{
				if ((this._MID != value))
				{
					this.OnMIDChanging(value);
					this.SendPropertyChanging();
					this._MID = value;
					this.SendPropertyChanged("MID");
					this.OnMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OIID", DbType="Int NOT NULL")]
		public int OIID
		{
			get
			{
				return this._OIID;
			}
			set
			{
				if ((this._OIID != value))
				{
					if (this._OrganizeInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOIIDChanging(value);
					this.SendPropertyChanging();
					this._OIID = value;
					this.SendPropertyChanged("OIID");
					this.OnOIIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JoinDate", DbType="DateTime NOT NULL")]
		public System.DateTime JoinDate
		{
			get
			{
				return this._JoinDate;
			}
			set
			{
				if ((this._JoinDate != value))
				{
					this.OnJoinDateChanging(value);
					this.SendPropertyChanging();
					this._JoinDate = value;
					this.SendPropertyChanged("JoinDate");
					this.OnJoinDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaveDate", DbType="DateTime NOT NULL")]
		public System.DateTime LeaveDate
		{
			get
			{
				return this._LeaveDate;
			}
			set
			{
				if ((this._LeaveDate != value))
				{
					this.OnLeaveDateChanging(value);
					this.SendPropertyChanging();
					this._LeaveDate = value;
					this.SendPropertyChanged("LeaveDate");
					this.OnLeaveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_M_OI_Account", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.M_OI_Account.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.M_OI_Account.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizeInfo_M_OI_Account", Storage="_OrganizeInfo", ThisKey="OIID", OtherKey="OIID", IsForeignKey=true)]
		public OrganizeInfo OrganizeInfo
		{
			get
			{
				return this._OrganizeInfo.Entity;
			}
			set
			{
				OrganizeInfo previousValue = this._OrganizeInfo.Entity;
				if (((previousValue != value) 
							|| (this._OrganizeInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizeInfo.Entity = null;
						previousValue.M_OI_Account.Remove(this);
					}
					this._OrganizeInfo.Entity = value;
					if ((value != null))
					{
						value.M_OI_Account.Add(this);
						this._OIID = value.OIID;
					}
					else
					{
						this._OIID = default(int);
					}
					this.SendPropertyChanged("OrganizeInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.M_OI2_Account")]
	public partial class M_OI2_Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MID;
		
		private int _OIID;
		
		private int _ACID;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<OrganizeInfo> _OrganizeInfo;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMIDChanging(int value);
    partial void OnMIDChanged();
    partial void OnOIIDChanging(int value);
    partial void OnOIIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public M_OI2_Account()
		{
			this._Account = default(EntityRef<Account>);
			this._OrganizeInfo = default(EntityRef<OrganizeInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MID
		{
			get
			{
				return this._MID;
			}
			set
			{
				if ((this._MID != value))
				{
					this.OnMIDChanging(value);
					this.SendPropertyChanging();
					this._MID = value;
					this.SendPropertyChanged("MID");
					this.OnMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OIID", DbType="Int NOT NULL")]
		public int OIID
		{
			get
			{
				return this._OIID;
			}
			set
			{
				if ((this._OIID != value))
				{
					if (this._OrganizeInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOIIDChanging(value);
					this.SendPropertyChanging();
					this._OIID = value;
					this.SendPropertyChanged("OIID");
					this.OnOIIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_M_OI2_Account", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.M_OI2_Account.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.M_OI2_Account.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizeInfo_M_OI2_Account", Storage="_OrganizeInfo", ThisKey="OIID", OtherKey="OIID", IsForeignKey=true)]
		public OrganizeInfo OrganizeInfo
		{
			get
			{
				return this._OrganizeInfo.Entity;
			}
			set
			{
				OrganizeInfo previousValue = this._OrganizeInfo.Entity;
				if (((previousValue != value) 
							|| (this._OrganizeInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizeInfo.Entity = null;
						previousValue.M_OI2_Account.Remove(this);
					}
					this._OrganizeInfo.Entity = value;
					if ((value != null))
					{
						value.M_OI2_Account.Add(this);
						this._OIID = value.OIID;
					}
					else
					{
						this._OIID = default(int);
					}
					this.SendPropertyChanged("OrganizeInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.M_Rool_Account")]
	public partial class M_Rool_Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MID;
		
		private int _ACID;
		
		private int _RID;
		
		private System.DateTime _JoinDate;
		
		private System.DateTime _LeaveDate;
		
		private string _Note;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Rool> _Rool;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMIDChanging(int value);
    partial void OnMIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnRIDChanging(int value);
    partial void OnRIDChanged();
    partial void OnJoinDateChanging(System.DateTime value);
    partial void OnJoinDateChanged();
    partial void OnLeaveDateChanging(System.DateTime value);
    partial void OnLeaveDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public M_Rool_Account()
		{
			this._Account = default(EntityRef<Account>);
			this._Rool = default(EntityRef<Rool>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MID
		{
			get
			{
				return this._MID;
			}
			set
			{
				if ((this._MID != value))
				{
					this.OnMIDChanging(value);
					this.SendPropertyChanging();
					this._MID = value;
					this.SendPropertyChanged("MID");
					this.OnMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RID", DbType="Int NOT NULL")]
		public int RID
		{
			get
			{
				return this._RID;
			}
			set
			{
				if ((this._RID != value))
				{
					if (this._Rool.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRIDChanging(value);
					this.SendPropertyChanging();
					this._RID = value;
					this.SendPropertyChanged("RID");
					this.OnRIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JoinDate", DbType="DateTime NOT NULL")]
		public System.DateTime JoinDate
		{
			get
			{
				return this._JoinDate;
			}
			set
			{
				if ((this._JoinDate != value))
				{
					this.OnJoinDateChanging(value);
					this.SendPropertyChanging();
					this._JoinDate = value;
					this.SendPropertyChanged("JoinDate");
					this.OnJoinDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaveDate", DbType="DateTime NOT NULL")]
		public System.DateTime LeaveDate
		{
			get
			{
				return this._LeaveDate;
			}
			set
			{
				if ((this._LeaveDate != value))
				{
					this.OnLeaveDateChanging(value);
					this.SendPropertyChanging();
					this._LeaveDate = value;
					this.SendPropertyChanged("LeaveDate");
					this.OnLeaveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(200)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_M_Rool_Account", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.M_Rool_Account.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.M_Rool_Account.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rool_M_Rool_Account", Storage="_Rool", ThisKey="RID", OtherKey="RID", IsForeignKey=true)]
		public Rool Rool
		{
			get
			{
				return this._Rool.Entity;
			}
			set
			{
				Rool previousValue = this._Rool.Entity;
				if (((previousValue != value) 
							|| (this._Rool.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rool.Entity = null;
						previousValue.M_Rool_Account.Remove(this);
					}
					this._Rool.Entity = value;
					if ((value != null))
					{
						value.M_Rool_Account.Add(this);
						this._RID = value.RID;
					}
					else
					{
						this._RID = default(int);
					}
					this.SendPropertyChanged("Rool");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.M_Rool_Menu")]
	public partial class M_Rool_Menu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MPMID;
		
		private int _RID;
		
		private int _MID;
		
		private bool _ShowFlag;
		
		private bool _AddFlag;
		
		private bool _EditFlag;
		
		private bool _DeleteFlag;
		
		private bool _PrintFlag;
		
		private bool _UploadFlag;
		
		private EntityRef<Menu> _Menu;
		
		private EntityRef<Rool> _Rool;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMPMIDChanging(int value);
    partial void OnMPMIDChanged();
    partial void OnRIDChanging(int value);
    partial void OnRIDChanged();
    partial void OnMIDChanging(int value);
    partial void OnMIDChanged();
    partial void OnShowFlagChanging(bool value);
    partial void OnShowFlagChanged();
    partial void OnAddFlagChanging(bool value);
    partial void OnAddFlagChanged();
    partial void OnEditFlagChanging(bool value);
    partial void OnEditFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnPrintFlagChanging(bool value);
    partial void OnPrintFlagChanged();
    partial void OnUploadFlagChanging(bool value);
    partial void OnUploadFlagChanged();
    #endregion
		
		public M_Rool_Menu()
		{
			this._Menu = default(EntityRef<Menu>);
			this._Rool = default(EntityRef<Rool>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MPMID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MPMID
		{
			get
			{
				return this._MPMID;
			}
			set
			{
				if ((this._MPMID != value))
				{
					this.OnMPMIDChanging(value);
					this.SendPropertyChanging();
					this._MPMID = value;
					this.SendPropertyChanged("MPMID");
					this.OnMPMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RID", DbType="Int NOT NULL")]
		public int RID
		{
			get
			{
				return this._RID;
			}
			set
			{
				if ((this._RID != value))
				{
					if (this._Rool.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRIDChanging(value);
					this.SendPropertyChanging();
					this._RID = value;
					this.SendPropertyChanged("RID");
					this.OnRIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MID", DbType="Int NOT NULL")]
		public int MID
		{
			get
			{
				return this._MID;
			}
			set
			{
				if ((this._MID != value))
				{
					if (this._Menu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMIDChanging(value);
					this.SendPropertyChanging();
					this._MID = value;
					this.SendPropertyChanged("MID");
					this.OnMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowFlag", DbType="Bit NOT NULL")]
		public bool ShowFlag
		{
			get
			{
				return this._ShowFlag;
			}
			set
			{
				if ((this._ShowFlag != value))
				{
					this.OnShowFlagChanging(value);
					this.SendPropertyChanging();
					this._ShowFlag = value;
					this.SendPropertyChanged("ShowFlag");
					this.OnShowFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddFlag", DbType="Bit NOT NULL")]
		public bool AddFlag
		{
			get
			{
				return this._AddFlag;
			}
			set
			{
				if ((this._AddFlag != value))
				{
					this.OnAddFlagChanging(value);
					this.SendPropertyChanging();
					this._AddFlag = value;
					this.SendPropertyChanged("AddFlag");
					this.OnAddFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditFlag", DbType="Bit NOT NULL")]
		public bool EditFlag
		{
			get
			{
				return this._EditFlag;
			}
			set
			{
				if ((this._EditFlag != value))
				{
					this.OnEditFlagChanging(value);
					this.SendPropertyChanging();
					this._EditFlag = value;
					this.SendPropertyChanged("EditFlag");
					this.OnEditFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrintFlag", DbType="Bit NOT NULL")]
		public bool PrintFlag
		{
			get
			{
				return this._PrintFlag;
			}
			set
			{
				if ((this._PrintFlag != value))
				{
					this.OnPrintFlagChanging(value);
					this.SendPropertyChanging();
					this._PrintFlag = value;
					this.SendPropertyChanged("PrintFlag");
					this.OnPrintFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadFlag", DbType="Bit NOT NULL")]
		public bool UploadFlag
		{
			get
			{
				return this._UploadFlag;
			}
			set
			{
				if ((this._UploadFlag != value))
				{
					this.OnUploadFlagChanging(value);
					this.SendPropertyChanging();
					this._UploadFlag = value;
					this.SendPropertyChanged("UploadFlag");
					this.OnUploadFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_M_Rool_Menu", Storage="_Menu", ThisKey="MID", OtherKey="MID", IsForeignKey=true)]
		public Menu Menu
		{
			get
			{
				return this._Menu.Entity;
			}
			set
			{
				Menu previousValue = this._Menu.Entity;
				if (((previousValue != value) 
							|| (this._Menu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Menu.Entity = null;
						previousValue.M_Rool_Menu.Remove(this);
					}
					this._Menu.Entity = value;
					if ((value != null))
					{
						value.M_Rool_Menu.Add(this);
						this._MID = value.MID;
					}
					else
					{
						this._MID = default(int);
					}
					this.SendPropertyChanged("Menu");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rool_M_Rool_Menu", Storage="_Rool", ThisKey="RID", OtherKey="RID", IsForeignKey=true)]
		public Rool Rool
		{
			get
			{
				return this._Rool.Entity;
			}
			set
			{
				Rool previousValue = this._Rool.Entity;
				if (((previousValue != value) 
							|| (this._Rool.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rool.Entity = null;
						previousValue.M_Rool_Menu.Remove(this);
					}
					this._Rool.Entity = value;
					if ((value != null))
					{
						value.M_Rool_Menu.Add(this);
						this._RID = value.RID;
					}
					else
					{
						this._RID = default(int);
					}
					this.SendPropertyChanged("Rool");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Meeting_Location")]
	public partial class Meeting_Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MLID;
		
		private string _Code;
		
		private string _Title;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntitySet<M_Location_Set> _M_Location_Set;
		
		private EntitySet<M_ML_Account> _M_ML_Account;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMLIDChanging(int value);
    partial void OnMLIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public Meeting_Location()
		{
			this._M_Location_Set = new EntitySet<M_Location_Set>(new Action<M_Location_Set>(this.attach_M_Location_Set), new Action<M_Location_Set>(this.detach_M_Location_Set));
			this._M_ML_Account = new EntitySet<M_ML_Account>(new Action<M_ML_Account>(this.attach_M_ML_Account), new Action<M_ML_Account>(this.detach_M_ML_Account));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MLID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MLID
		{
			get
			{
				return this._MLID;
			}
			set
			{
				if ((this._MLID != value))
				{
					this.OnMLIDChanging(value);
					this.SendPropertyChanging();
					this._MLID = value;
					this.SendPropertyChanged("MLID");
					this.OnMLIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(30)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meeting_Location_M_Location_Set", Storage="_M_Location_Set", ThisKey="MLID", OtherKey="MLID")]
		public EntitySet<M_Location_Set> M_Location_Set
		{
			get
			{
				return this._M_Location_Set;
			}
			set
			{
				this._M_Location_Set.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meeting_Location_M_ML_Account", Storage="_M_ML_Account", ThisKey="MLID", OtherKey="MLID")]
		public EntitySet<M_ML_Account> M_ML_Account
		{
			get
			{
				return this._M_ML_Account;
			}
			set
			{
				this._M_ML_Account.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_M_Location_Set(M_Location_Set entity)
		{
			this.SendPropertyChanging();
			entity.Meeting_Location = this;
		}
		
		private void detach_M_Location_Set(M_Location_Set entity)
		{
			this.SendPropertyChanging();
			entity.Meeting_Location = null;
		}
		
		private void attach_M_ML_Account(M_ML_Account entity)
		{
			this.SendPropertyChanging();
			entity.Meeting_Location = this;
		}
		
		private void detach_M_ML_Account(M_ML_Account entity)
		{
			this.SendPropertyChanging();
			entity.Meeting_Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Menu")]
	public partial class Menu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MID;
		
		private int _ParentID;
		
		private int _MenuType;
		
		private string _Title;
		
		private string _URL;
		
		private string _ImgURL;
		
		private int _SortNo;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntitySet<M_Rool_Menu> _M_Rool_Menu;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMIDChanging(int value);
    partial void OnMIDChanged();
    partial void OnParentIDChanging(int value);
    partial void OnParentIDChanged();
    partial void OnMenuTypeChanging(int value);
    partial void OnMenuTypeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnImgURLChanging(string value);
    partial void OnImgURLChanged();
    partial void OnSortNoChanging(int value);
    partial void OnSortNoChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public Menu()
		{
			this._M_Rool_Menu = new EntitySet<M_Rool_Menu>(new Action<M_Rool_Menu>(this.attach_M_Rool_Menu), new Action<M_Rool_Menu>(this.detach_M_Rool_Menu));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MID
		{
			get
			{
				return this._MID;
			}
			set
			{
				if ((this._MID != value))
				{
					this.OnMIDChanging(value);
					this.SendPropertyChanging();
					this._MID = value;
					this.SendPropertyChanged("MID");
					this.OnMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int NOT NULL")]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuType", DbType="Int NOT NULL")]
		public int MenuType
		{
			get
			{
				return this._MenuType;
			}
			set
			{
				if ((this._MenuType != value))
				{
					this.OnMenuTypeChanging(value);
					this.SendPropertyChanging();
					this._MenuType = value;
					this.SendPropertyChanged("MenuType");
					this.OnMenuTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImgURL", DbType="NVarChar(50)")]
		public string ImgURL
		{
			get
			{
				return this._ImgURL;
			}
			set
			{
				if ((this._ImgURL != value))
				{
					this.OnImgURLChanging(value);
					this.SendPropertyChanging();
					this._ImgURL = value;
					this.SendPropertyChanged("ImgURL");
					this.OnImgURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortNo", DbType="Int NOT NULL")]
		public int SortNo
		{
			get
			{
				return this._SortNo;
			}
			set
			{
				if ((this._SortNo != value))
				{
					this.OnSortNoChanging(value);
					this.SendPropertyChanging();
					this._SortNo = value;
					this.SendPropertyChanged("SortNo");
					this.OnSortNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_M_Rool_Menu", Storage="_M_Rool_Menu", ThisKey="MID", OtherKey="MID")]
		public EntitySet<M_Rool_Menu> M_Rool_Menu
		{
			get
			{
				return this._M_Rool_Menu;
			}
			set
			{
				this._M_Rool_Menu.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_M_Rool_Menu(M_Rool_Menu entity)
		{
			this.SendPropertyChanging();
			entity.Menu = this;
		}
		
		private void detach_M_Rool_Menu(M_Rool_Menu entity)
		{
			this.SendPropertyChanging();
			entity.Menu = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Organize")]
	public partial class Organize : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OID;
		
		private string _ItemID;
		
		private int _ParentID;
		
		private string _Title;
		
		private string _JobTitle;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntitySet<M_O_Account> _M_O_Account;
		
		private EntitySet<OrganizeInfo> _OrganizeInfo;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(int value);
    partial void OnOIDChanged();
    partial void OnItemIDChanging(string value);
    partial void OnItemIDChanged();
    partial void OnParentIDChanging(int value);
    partial void OnParentIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnJobTitleChanging(string value);
    partial void OnJobTitleChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public Organize()
		{
			this._M_O_Account = new EntitySet<M_O_Account>(new Action<M_O_Account>(this.attach_M_O_Account), new Action<M_O_Account>(this.detach_M_O_Account));
			this._OrganizeInfo = new EntitySet<OrganizeInfo>(new Action<OrganizeInfo>(this.attach_OrganizeInfo), new Action<OrganizeInfo>(this.detach_OrganizeInfo));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="VarChar(20)")]
		public string ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int NOT NULL")]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(10)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobTitle", DbType="NVarChar(10)")]
		public string JobTitle
		{
			get
			{
				return this._JobTitle;
			}
			set
			{
				if ((this._JobTitle != value))
				{
					this.OnJobTitleChanging(value);
					this.SendPropertyChanging();
					this._JobTitle = value;
					this.SendPropertyChanged("JobTitle");
					this.OnJobTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organize_M_O_Account", Storage="_M_O_Account", ThisKey="OID", OtherKey="OID")]
		public EntitySet<M_O_Account> M_O_Account
		{
			get
			{
				return this._M_O_Account;
			}
			set
			{
				this._M_O_Account.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organize_OrganizeInfo", Storage="_OrganizeInfo", ThisKey="OID", OtherKey="OID")]
		public EntitySet<OrganizeInfo> OrganizeInfo
		{
			get
			{
				return this._OrganizeInfo;
			}
			set
			{
				this._OrganizeInfo.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_M_O_Account(M_O_Account entity)
		{
			this.SendPropertyChanging();
			entity.Organize = this;
		}
		
		private void detach_M_O_Account(M_O_Account entity)
		{
			this.SendPropertyChanging();
			entity.Organize = null;
		}
		
		private void attach_OrganizeInfo(OrganizeInfo entity)
		{
			this.SendPropertyChanging();
			entity.Organize = this;
		}
		
		private void detach_OrganizeInfo(OrganizeInfo entity)
		{
			this.SendPropertyChanging();
			entity.Organize = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganizeInfo")]
	public partial class OrganizeInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OIID;
		
		private int _OID;
		
		private int _ParentID;
		
		private string _Title;
		
		private int _ACID;
		
		private string _Note;
		
		private int _BusinessType;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private int _OldID;
		
		private EntitySet<M_OI_Account> _M_OI_Account;
		
		private EntitySet<M_OI2_Account> _M_OI2_Account;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Organize> _Organize;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIIDChanging(int value);
    partial void OnOIIDChanged();
    partial void OnOIDChanging(int value);
    partial void OnOIDChanged();
    partial void OnParentIDChanging(int value);
    partial void OnParentIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnBusinessTypeChanging(int value);
    partial void OnBusinessTypeChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    partial void OnOldIDChanging(int value);
    partial void OnOldIDChanged();
    #endregion
		
		public OrganizeInfo()
		{
			this._M_OI_Account = new EntitySet<M_OI_Account>(new Action<M_OI_Account>(this.attach_M_OI_Account), new Action<M_OI_Account>(this.detach_M_OI_Account));
			this._M_OI2_Account = new EntitySet<M_OI2_Account>(new Action<M_OI2_Account>(this.attach_M_OI2_Account), new Action<M_OI2_Account>(this.detach_M_OI2_Account));
			this._Account = default(EntityRef<Account>);
			this._Organize = default(EntityRef<Organize>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OIID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OIID
		{
			get
			{
				return this._OIID;
			}
			set
			{
				if ((this._OIID != value))
				{
					this.OnOIIDChanging(value);
					this.SendPropertyChanging();
					this._OIID = value;
					this.SendPropertyChanged("OIID");
					this.OnOIIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OID", DbType="Int NOT NULL")]
		public int OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					if (this._Organize.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int NOT NULL")]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessType", DbType="Int NOT NULL")]
		public int BusinessType
		{
			get
			{
				return this._BusinessType;
			}
			set
			{
				if ((this._BusinessType != value))
				{
					this.OnBusinessTypeChanging(value);
					this.SendPropertyChanging();
					this._BusinessType = value;
					this.SendPropertyChanged("BusinessType");
					this.OnBusinessTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldID", DbType="Int NOT NULL")]
		public int OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizeInfo_M_OI_Account", Storage="_M_OI_Account", ThisKey="OIID", OtherKey="OIID")]
		public EntitySet<M_OI_Account> M_OI_Account
		{
			get
			{
				return this._M_OI_Account;
			}
			set
			{
				this._M_OI_Account.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizeInfo_M_OI2_Account", Storage="_M_OI2_Account", ThisKey="OIID", OtherKey="OIID")]
		public EntitySet<M_OI2_Account> M_OI2_Account
		{
			get
			{
				return this._M_OI2_Account;
			}
			set
			{
				this._M_OI2_Account.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_OrganizeInfo", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.OrganizeInfo.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.OrganizeInfo.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organize_OrganizeInfo", Storage="_Organize", ThisKey="OID", OtherKey="OID", IsForeignKey=true)]
		public Organize Organize
		{
			get
			{
				return this._Organize.Entity;
			}
			set
			{
				Organize previousValue = this._Organize.Entity;
				if (((previousValue != value) 
							|| (this._Organize.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organize.Entity = null;
						previousValue.OrganizeInfo.Remove(this);
					}
					this._Organize.Entity = value;
					if ((value != null))
					{
						value.OrganizeInfo.Add(this);
						this._OID = value.OID;
					}
					else
					{
						this._OID = default(int);
					}
					this.SendPropertyChanged("Organize");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_M_OI_Account(M_OI_Account entity)
		{
			this.SendPropertyChanging();
			entity.OrganizeInfo = this;
		}
		
		private void detach_M_OI_Account(M_OI_Account entity)
		{
			this.SendPropertyChanging();
			entity.OrganizeInfo = null;
		}
		
		private void attach_M_OI2_Account(M_OI2_Account entity)
		{
			this.SendPropertyChanging();
			entity.OrganizeInfo = this;
		}
		
		private void detach_M_OI2_Account(M_OI2_Account entity)
		{
			this.SendPropertyChanging();
			entity.OrganizeInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rool")]
	public partial class Rool : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RID;
		
		private int _ParentID;
		
		private int _OID;
		
		private string _Title;
		
		private int _RoolType;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntitySet<M_Rool_Account> _M_Rool_Account;
		
		private EntitySet<M_Rool_Menu> _M_Rool_Menu;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRIDChanging(int value);
    partial void OnRIDChanged();
    partial void OnParentIDChanging(int value);
    partial void OnParentIDChanged();
    partial void OnOIDChanging(int value);
    partial void OnOIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnRoolTypeChanging(int value);
    partial void OnRoolTypeChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public Rool()
		{
			this._M_Rool_Account = new EntitySet<M_Rool_Account>(new Action<M_Rool_Account>(this.attach_M_Rool_Account), new Action<M_Rool_Account>(this.detach_M_Rool_Account));
			this._M_Rool_Menu = new EntitySet<M_Rool_Menu>(new Action<M_Rool_Menu>(this.attach_M_Rool_Menu), new Action<M_Rool_Menu>(this.detach_M_Rool_Menu));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RID
		{
			get
			{
				return this._RID;
			}
			set
			{
				if ((this._RID != value))
				{
					this.OnRIDChanging(value);
					this.SendPropertyChanging();
					this._RID = value;
					this.SendPropertyChanged("RID");
					this.OnRIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int NOT NULL")]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OID", DbType="Int NOT NULL")]
		public int OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoolType", DbType="Int NOT NULL")]
		public int RoolType
		{
			get
			{
				return this._RoolType;
			}
			set
			{
				if ((this._RoolType != value))
				{
					this.OnRoolTypeChanging(value);
					this.SendPropertyChanging();
					this._RoolType = value;
					this.SendPropertyChanged("RoolType");
					this.OnRoolTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rool_M_Rool_Account", Storage="_M_Rool_Account", ThisKey="RID", OtherKey="RID")]
		public EntitySet<M_Rool_Account> M_Rool_Account
		{
			get
			{
				return this._M_Rool_Account;
			}
			set
			{
				this._M_Rool_Account.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rool_M_Rool_Menu", Storage="_M_Rool_Menu", ThisKey="RID", OtherKey="RID")]
		public EntitySet<M_Rool_Menu> M_Rool_Menu
		{
			get
			{
				return this._M_Rool_Menu;
			}
			set
			{
				this._M_Rool_Menu.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_M_Rool_Account(M_Rool_Account entity)
		{
			this.SendPropertyChanging();
			entity.Rool = this;
		}
		
		private void detach_M_Rool_Account(M_Rool_Account entity)
		{
			this.SendPropertyChanging();
			entity.Rool = null;
		}
		
		private void attach_M_Rool_Menu(M_Rool_Menu entity)
		{
			this.SendPropertyChanging();
			entity.Rool = this;
		}
		
		private void detach_M_Rool_Menu(M_Rool_Menu entity)
		{
			this.SendPropertyChanging();
			entity.Rool = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contect")]
	public partial class Contect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CID;
		
		private int _TargetType;
		
		private int _TargetID;
		
		private int _ZID;
		
		private int _ContectType;
		
		private string _ContectValue;
		
		private bool _CheckFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _CheckDate;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(int value);
    partial void OnCIDChanged();
    partial void OnTargetTypeChanging(int value);
    partial void OnTargetTypeChanged();
    partial void OnTargetIDChanging(int value);
    partial void OnTargetIDChanged();
    partial void OnZIDChanging(int value);
    partial void OnZIDChanged();
    partial void OnContectTypeChanging(int value);
    partial void OnContectTypeChanged();
    partial void OnContectValueChanging(string value);
    partial void OnContectValueChanged();
    partial void OnCheckFlagChanging(bool value);
    partial void OnCheckFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnCheckDateChanging(System.DateTime value);
    partial void OnCheckDateChanged();
    #endregion
		
		public Contect()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetType", DbType="Int NOT NULL")]
		public int TargetType
		{
			get
			{
				return this._TargetType;
			}
			set
			{
				if ((this._TargetType != value))
				{
					this.OnTargetTypeChanging(value);
					this.SendPropertyChanging();
					this._TargetType = value;
					this.SendPropertyChanged("TargetType");
					this.OnTargetTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetID", DbType="Int NOT NULL")]
		public int TargetID
		{
			get
			{
				return this._TargetID;
			}
			set
			{
				if ((this._TargetID != value))
				{
					this.OnTargetIDChanging(value);
					this.SendPropertyChanging();
					this._TargetID = value;
					this.SendPropertyChanged("TargetID");
					this.OnTargetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZID", DbType="Int NOT NULL")]
		public int ZID
		{
			get
			{
				return this._ZID;
			}
			set
			{
				if ((this._ZID != value))
				{
					this.OnZIDChanging(value);
					this.SendPropertyChanging();
					this._ZID = value;
					this.SendPropertyChanged("ZID");
					this.OnZIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContectType", DbType="Int NOT NULL")]
		public int ContectType
		{
			get
			{
				return this._ContectType;
			}
			set
			{
				if ((this._ContectType != value))
				{
					this.OnContectTypeChanging(value);
					this.SendPropertyChanging();
					this._ContectType = value;
					this.SendPropertyChanged("ContectType");
					this.OnContectTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContectValue", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string ContectValue
		{
			get
			{
				return this._ContectValue;
			}
			set
			{
				if ((this._ContectValue != value))
				{
					this.OnContectValueChanging(value);
					this.SendPropertyChanging();
					this._ContectValue = value;
					this.SendPropertyChanged("ContectValue");
					this.OnContectValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckFlag", DbType="Bit NOT NULL")]
		public bool CheckFlag
		{
			get
			{
				return this._CheckFlag;
			}
			set
			{
				if ((this._CheckFlag != value))
				{
					this.OnCheckFlagChanging(value);
					this.SendPropertyChanging();
					this._CheckFlag = value;
					this.SendPropertyChanged("CheckFlag");
					this.OnCheckFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckDate", DbType="DateTime NOT NULL")]
		public System.DateTime CheckDate
		{
			get
			{
				return this._CheckDate;
			}
			set
			{
				if ((this._CheckDate != value))
				{
					this.OnCheckDateChanging(value);
					this.SendPropertyChanging();
					this._CheckDate = value;
					this.SendPropertyChanged("CheckDate");
					this.OnCheckDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Family")]
	public partial class Family : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FID;
		
		private int _ACID;
		
		private string _Name;
		
		private string _IDNumber;
		
		private string _Login;
		
		private int _FamilyType;
		
		private string _FamilyTitle;
		
		private int _TargetACID;
		
		private int _SortNo;
		
		private bool _DeleteFlag;
		
		private EntityRef<Account> _Account;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFIDChanging(int value);
    partial void OnFIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDNumberChanging(string value);
    partial void OnIDNumberChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnFamilyTypeChanging(int value);
    partial void OnFamilyTypeChanged();
    partial void OnFamilyTitleChanging(string value);
    partial void OnFamilyTitleChanged();
    partial void OnTargetACIDChanging(int value);
    partial void OnTargetACIDChanged();
    partial void OnSortNoChanging(int value);
    partial void OnSortNoChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    #endregion
		
		public Family()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FID
		{
			get
			{
				return this._FID;
			}
			set
			{
				if ((this._FID != value))
				{
					this.OnFIDChanging(value);
					this.SendPropertyChanging();
					this._FID = value;
					this.SendPropertyChanged("FID");
					this.OnFIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNumber", DbType="NVarChar(30)")]
		public string IDNumber
		{
			get
			{
				return this._IDNumber;
			}
			set
			{
				if ((this._IDNumber != value))
				{
					this.OnIDNumberChanging(value);
					this.SendPropertyChanging();
					this._IDNumber = value;
					this.SendPropertyChanged("IDNumber");
					this.OnIDNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(100)")]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FamilyType", DbType="Int NOT NULL")]
		public int FamilyType
		{
			get
			{
				return this._FamilyType;
			}
			set
			{
				if ((this._FamilyType != value))
				{
					this.OnFamilyTypeChanging(value);
					this.SendPropertyChanging();
					this._FamilyType = value;
					this.SendPropertyChanged("FamilyType");
					this.OnFamilyTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FamilyTitle", DbType="NVarChar(50)")]
		public string FamilyTitle
		{
			get
			{
				return this._FamilyTitle;
			}
			set
			{
				if ((this._FamilyTitle != value))
				{
					this.OnFamilyTitleChanging(value);
					this.SendPropertyChanging();
					this._FamilyTitle = value;
					this.SendPropertyChanged("FamilyTitle");
					this.OnFamilyTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetACID", DbType="Int NOT NULL")]
		public int TargetACID
		{
			get
			{
				return this._TargetACID;
			}
			set
			{
				if ((this._TargetACID != value))
				{
					this.OnTargetACIDChanging(value);
					this.SendPropertyChanging();
					this._TargetACID = value;
					this.SendPropertyChanged("TargetACID");
					this.OnTargetACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortNo", DbType="Int NOT NULL")]
		public int SortNo
		{
			get
			{
				return this._SortNo;
			}
			set
			{
				if ((this._SortNo != value))
				{
					this.OnSortNoChanging(value);
					this.SendPropertyChanging();
					this._SortNo = value;
					this.SendPropertyChanged("SortNo");
					this.OnSortNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Family", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Family.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Family.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account_Performance")]
	public partial class Account_Performance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _APID;
		
		private int _ACID;
		
		private int _PerformanceType;
		
		private string _Performance;
		
		private int _SortNo;
		
		private EntityRef<Account> _Account;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAPIDChanging(int value);
    partial void OnAPIDChanged();
    partial void OnACIDChanging(int value);
    partial void OnACIDChanged();
    partial void OnPerformanceTypeChanging(int value);
    partial void OnPerformanceTypeChanged();
    partial void OnPerformanceChanging(string value);
    partial void OnPerformanceChanged();
    partial void OnSortNoChanging(int value);
    partial void OnSortNoChanged();
    #endregion
		
		public Account_Performance()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_APID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int APID
		{
			get
			{
				return this._APID;
			}
			set
			{
				if ((this._APID != value))
				{
					this.OnAPIDChanging(value);
					this.SendPropertyChanging();
					this._APID = value;
					this.SendPropertyChanged("APID");
					this.OnAPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACID", DbType="Int NOT NULL")]
		public int ACID
		{
			get
			{
				return this._ACID;
			}
			set
			{
				if ((this._ACID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACIDChanging(value);
					this.SendPropertyChanging();
					this._ACID = value;
					this.SendPropertyChanged("ACID");
					this.OnACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerformanceType", DbType="Int NOT NULL")]
		public int PerformanceType
		{
			get
			{
				return this._PerformanceType;
			}
			set
			{
				if ((this._PerformanceType != value))
				{
					this.OnPerformanceTypeChanging(value);
					this.SendPropertyChanging();
					this._PerformanceType = value;
					this.SendPropertyChanged("PerformanceType");
					this.OnPerformanceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Performance", DbType="NChar(10)")]
		public string Performance
		{
			get
			{
				return this._Performance;
			}
			set
			{
				if ((this._Performance != value))
				{
					this.OnPerformanceChanging(value);
					this.SendPropertyChanging();
					this._Performance = value;
					this.SendPropertyChanged("Performance");
					this.OnPerformanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortNo", DbType="Int NOT NULL")]
		public int SortNo
		{
			get
			{
				return this._SortNo;
			}
			set
			{
				if ((this._SortNo != value))
				{
					this.OnSortNoChanging(value);
					this.SendPropertyChanging();
					this._SortNo = value;
					this.SendPropertyChanged("SortNo");
					this.OnSortNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Account_Performance", Storage="_Account", ThisKey="ACID", OtherKey="ACID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Account_Performance.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Account_Performance.Add(this);
						this._ACID = value.ACID;
					}
					else
					{
						this._ACID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course_Category")]
	public partial class Course_Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CCID;
		
		private string _Code;
		
		private string _Title;
		
		private string _Note;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntitySet<Course> _Course;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCCIDChanging(int value);
    partial void OnCCIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public Course_Category()
		{
			this._Course = new EntitySet<Course>(new Action<Course>(this.attach_Course), new Action<Course>(this.detach_Course));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CCID
		{
			get
			{
				return this._CCID;
			}
			set
			{
				if ((this._CCID != value))
				{
					this.OnCCIDChanging(value);
					this.SendPropertyChanging();
					this._CCID = value;
					this.SendPropertyChanged("CCID");
					this.OnCCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(20)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Category_Course", Storage="_Course", ThisKey="CCID", OtherKey="CCID")]
		public EntitySet<Course> Course
		{
			get
			{
				return this._Course;
			}
			set
			{
				this._Course.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Course(Course entity)
		{
			this.SendPropertyChanging();
			entity.Course_Category = this;
		}
		
		private void detach_Course(Course entity)
		{
			this.SendPropertyChanging();
			entity.Course_Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CID;
		
		private int _CCID;
		
		private string _Title;
		
		private int _CourseType;
		
		private string _CourseInfo;
		
		private string _TargetInfo;
		
		private string _GraduationInfo;
		
		private bool _ActiveFlag;
		
		private bool _DeleteFlag;
		
		private System.DateTime _CreDate;
		
		private System.DateTime _UpdDate;
		
		private int _SaveACID;
		
		private EntityRef<Course_Category> _Course_Category;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(int value);
    partial void OnCIDChanged();
    partial void OnCCIDChanging(int value);
    partial void OnCCIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCourseTypeChanging(int value);
    partial void OnCourseTypeChanged();
    partial void OnCourseInfoChanging(string value);
    partial void OnCourseInfoChanged();
    partial void OnTargetInfoChanging(string value);
    partial void OnTargetInfoChanged();
    partial void OnGraduationInfoChanging(string value);
    partial void OnGraduationInfoChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnDeleteFlagChanging(bool value);
    partial void OnDeleteFlagChanged();
    partial void OnCreDateChanging(System.DateTime value);
    partial void OnCreDateChanged();
    partial void OnUpdDateChanging(System.DateTime value);
    partial void OnUpdDateChanged();
    partial void OnSaveACIDChanging(int value);
    partial void OnSaveACIDChanged();
    #endregion
		
		public Course()
		{
			this._Course_Category = default(EntityRef<Course_Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCID", DbType="Int NOT NULL")]
		public int CCID
		{
			get
			{
				return this._CCID;
			}
			set
			{
				if ((this._CCID != value))
				{
					if (this._Course_Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCCIDChanging(value);
					this.SendPropertyChanging();
					this._CCID = value;
					this.SendPropertyChanged("CCID");
					this.OnCCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseType", DbType="Int NOT NULL")]
		public int CourseType
		{
			get
			{
				return this._CourseType;
			}
			set
			{
				if ((this._CourseType != value))
				{
					this.OnCourseTypeChanging(value);
					this.SendPropertyChanging();
					this._CourseType = value;
					this.SendPropertyChanged("CourseType");
					this.OnCourseTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseInfo", DbType="NVarChar(MAX)")]
		public string CourseInfo
		{
			get
			{
				return this._CourseInfo;
			}
			set
			{
				if ((this._CourseInfo != value))
				{
					this.OnCourseInfoChanging(value);
					this.SendPropertyChanging();
					this._CourseInfo = value;
					this.SendPropertyChanged("CourseInfo");
					this.OnCourseInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetInfo", DbType="NVarChar(MAX)")]
		public string TargetInfo
		{
			get
			{
				return this._TargetInfo;
			}
			set
			{
				if ((this._TargetInfo != value))
				{
					this.OnTargetInfoChanging(value);
					this.SendPropertyChanging();
					this._TargetInfo = value;
					this.SendPropertyChanged("TargetInfo");
					this.OnTargetInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GraduationInfo", DbType="NVarChar(MAX)")]
		public string GraduationInfo
		{
			get
			{
				return this._GraduationInfo;
			}
			set
			{
				if ((this._GraduationInfo != value))
				{
					this.OnGraduationInfoChanging(value);
					this.SendPropertyChanging();
					this._GraduationInfo = value;
					this.SendPropertyChanged("GraduationInfo");
					this.OnGraduationInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteFlag", DbType="Bit NOT NULL")]
		public bool DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this.OnDeleteFlagChanging(value);
					this.SendPropertyChanging();
					this._DeleteFlag = value;
					this.SendPropertyChanged("DeleteFlag");
					this.OnDeleteFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreDate
		{
			get
			{
				return this._CreDate;
			}
			set
			{
				if ((this._CreDate != value))
				{
					this.OnCreDateChanging(value);
					this.SendPropertyChanging();
					this._CreDate = value;
					this.SendPropertyChanged("CreDate");
					this.OnCreDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdDate
		{
			get
			{
				return this._UpdDate;
			}
			set
			{
				if ((this._UpdDate != value))
				{
					this.OnUpdDateChanging(value);
					this.SendPropertyChanging();
					this._UpdDate = value;
					this.SendPropertyChanged("UpdDate");
					this.OnUpdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveACID", DbType="Int NOT NULL")]
		public int SaveACID
		{
			get
			{
				return this._SaveACID;
			}
			set
			{
				if ((this._SaveACID != value))
				{
					this.OnSaveACIDChanging(value);
					this.SendPropertyChanging();
					this._SaveACID = value;
					this.SendPropertyChanged("SaveACID");
					this.OnSaveACIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Category_Course", Storage="_Course_Category", ThisKey="CCID", OtherKey="CCID", IsForeignKey=true)]
		public Course_Category Course_Category
		{
			get
			{
				return this._Course_Category.Entity;
			}
			set
			{
				Course_Category previousValue = this._Course_Category.Entity;
				if (((previousValue != value) 
							|| (this._Course_Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course_Category.Entity = null;
						previousValue.Course.Remove(this);
					}
					this._Course_Category.Entity = value;
					if ((value != null))
					{
						value.Course.Add(this);
						this._CCID = value.CCID;
					}
					else
					{
						this._CCID = default(int);
					}
					this.SendPropertyChanged("Course_Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class sp_GetOI2ListResult
	{
		
		private System.Nullable<int> _OIID;
		
		public sp_GetOI2ListResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OIID", DbType="Int")]
		public System.Nullable<int> OIID
		{
			get
			{
				return this._OIID;
			}
			set
			{
				if ((this._OIID != value))
				{
					this._OIID = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
